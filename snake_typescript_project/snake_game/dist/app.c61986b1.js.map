{"version":3,"sources":["ts/design_pattern_examples/5_singleton/GameState.ts","ts/design_pattern_examples/1_strategy/AIController.ts","ts/design_pattern_examples/1_strategy/strategies/NeutralBehaviour.ts","ts/design_pattern_examples/1_strategy/strategies/FleeingBehaviour.ts","ts/design_pattern_examples/2_factory/Enemies/BaseEnemy.ts","ts/design_pattern_examples/2_factory/Enemies/ShootingEnemy.ts","ts/design_pattern_examples/2_factory/EnemyFactory.ts","ts/design_pattern_examples/2_factory/ShootingEnemyFactory.ts","ts/design_pattern_examples/2_factory/Enemies/ExplodingEnemy.ts","ts/helper/Random.ts","ts/design_pattern_examples/2_factory/ExplodingEnemyFactory.ts","ts/design_pattern_examples/3_builder/Config.ts","ts/design_pattern_examples/3_builder/ConfigBuilder.ts","ts/design_pattern_examples/4_object_pooler/Bullet.ts","ts/design_pattern_examples/4_object_pooler/BulletPool.ts","ts/design_pattern_examples/6_adapter/adapters/OfficeCalendarAdapter.ts","ts/design_pattern_examples/6_adapter/adaptees/OfficeCalendar.ts","ts/design_pattern_examples/6_adapter/adapters/GoogleCalendarAdapter.ts","ts/design_pattern_examples/6_adapter/adaptees/GoogleCalendar.ts","ts/design_pattern_examples/7_facade/MailRepository.ts","ts/design_pattern_examples/7_facade/ContactRepository.ts","ts/design_pattern_examples/7_facade/Logger.ts","ts/design_pattern_examples/7_facade/MailFacade.ts","ts/design_pattern_examples/8_observer/observable/HealthManager.ts","ts/design_pattern_examples/8_observer/observer/UI.ts","ts/design_pattern_examples/9_state/MovingContext.ts","ts/design_pattern_examples/9_state/states/State.ts","ts/design_pattern_examples/9_state/states/ExhaustedState.ts","ts/design_pattern_examples/9_state/states/EnergeticState.ts","ts/design_pattern_examples/0_test/PatternTester.ts","app.ts"],"names":[],"mappings":";;;;;;;;;;;;A8BAA,AlBAA,AEAA,AQAA,IQAA,A7BEA,AEAA,ADAA,AECA,AEAA,AKHA,ACAA,ACAA,ACAA,AdAA,AkBCA,AFAA,ACGA,AFAA,AKJA,ACAA,ACAA,AHAA,AKGA,ACDA,ACAA,AjBFA,QGAA,AEAA,GFAA,AEAA,IgBAA,CRAA,EQAA,AlBAA,AEAA,CFAA,AEAA,AQAA,OAAA,CAAA,EVAA,AEAA,CFAA,AEAA,GgBAA,CAAA,OAAA,CAAA,GRAA,CAAA,+CQAA,CAAA,CAAA;A7BOI,AGAA,AOPJ,AEKI,AbCA,AiBCA,AFAA,ASJJ,ACEI,gBDFJ,EXEuB,CAAnB,CFLJ,CPOuB,ASFW,CAA9B,CbCA,CCCY,AYF2B,CYA3B,ErBEZ,EAAiC,CqBFjC,EAAwB,CxBExB,AgBAY,AFAA,EdAqB,MgBAjC,AFAA,EEAoC,AFAA;AeJxC,A7BIqC,AGAA,AOPrC,AEK2C,AbCvC,AiBCoC,AFAA,AONxC,AEEA,ACE4B,IKFxB,AlBAJ,AEDA,AQDA,eQEI,CAAA,GRFJ,GAAA,CQEA,GAAoB,GRFpB,CAAA,GQEA,kBRFA,CAAA;AVMI,AEFA,wBAAA,GFEA;AXCI,AGAA,AOPI,ACMR,ACDI,ACDJ,AdGI,AiBAA,AFAA,AONR,AEGY,ACCJ,IHJR,KrBMa,AGAA,AOPD,AEKC,AbEA,AiBAA,AFAA,ASHD,ACCC,GHJb,GlBMQ,AOPI,AWCZ,AGIQ,GrBEc,AOPO,AEKrB,AbEA,AiBAA,AFAA,AUFc,CxBEd,AUPI,EEKa,AbEA,AiBAA,AFAA,ASHb,CvBGc,AqBN1B,CAAA,AGIQ,CrBEA,AoBH2B,CXC3B,CbEA,CwBHI,EPGJ,AFAA,EdAA,EqBNR,CAAA;ArBOK,AGAG,AOPI,AEKJ,AbEH,AiBAA,AFAA,ASQJ,SpBRY,AOPD,AEKC,CAAL,GAAS,CAAT,GTEA,GAAgB,COPZ,GAAyB,CPO7B,COPI;AkBFZ,AzBUK,AOkBJ,ACpBO,ACAA,ACFA,AWCA,IIPR,APIA,ACDA,KXKa,ACAA,ACFA,AWCA,CZCL,GAAS,CAAT,CgBRR,AJOQ,CbCA,AaDY,EIPpB,CjBQuB,CEFf,GFEmB,AEFA,GWCnB,CXDuB,AWCA,IbCJ,AaDnB,CbCmB,AEFA,CeN3B,CAAA,AfMQ,IFEe,EAAf,CiBRR,CAAA,0BAAA,CAAA,CAAA;AjBSK,ACAA,ACFA,AQID,ACHA,AEAC,wBHIoC,CCJlB,AdPP,KAAa,CYAV,AEOf,AGHkB,CVHF,CVOC,AiBDgB,CpBLf,ADAA,AiBFG,CCAF,AXAiB,GSCd,EQGkB,KPJF;AUA1C,A1BGQ,ADAA,AIMA,AYPA,AFAA,AIDA,ACAA,ACUiC,AHVjC,AIM6B,AGF7B,AjBJA,IoBDR,E1BGQ,ADAA,AgBDA,AFAA,AIDA,ACAA,AFAA,EGSQ,EhBDF,CoBJD,EvBFE,ADAA,AgBDA,AFAA,AIDA,ACAA,AFAA,AVAA,CNEC,ADAA,AgBDA,AFAA,AIDA,ACAA,AFAA,CbQG,EHNX,ADAA,AgBDA,AFAA,AIDA,ACAA,AFAA,AVAW,CoBDnB,A1BGoB,ADAA,AIME,AYPF,AFAA,AIDA,ACAA,AFAA,AOIZ,AjBJY,GoBDpB,AHKuB,CLJC,ACUiB,ChBFd,AGRZ,CAAW,EYAN,EQDpB,AHKQ,AjBJsB,CoBD9B,ARC+B,AZAA,KHQT,CGRI,CHQlB,GHNA,AiBFA,ECAY,AZAqB,GAAG,EYAI,CZAH,CPErC,EOFiC,GAAQ,CAAvB,GoBD1B,CAAA,ApBCoD,GAArC,CAAP,QYAA,IFAoE,GHCpE,KEAA,CCDY,GAAoE,GAAhF,IGSyC,IAAI,gBAAA,CAAA,cAAJ,EACR;AnBPpC,ADAA,AIQG,AYTH,AFAA,AIDG,ACAA,ACSiC,AHTpC,AOIA,AjBJA,MHUG,EgBF+D,GhBE1D,CAAC,CcVC,ACAA,CDAP,ACAA,GfUA,QgBDiC,EEJvB,MvBIM,CDSF,GiBTG,AFAA,KSJqB,EvBID,oDqBDiE,IAAI,mBAAA,CAAA,iBAAJ,EACrE;AOVzC,A5BWQ,AKCA,ANQA,AiBTA,AFAA,AKTH,ACAA,ACQoC,ACR9B,ACMH,IKRR,EvBYQ,EgBFI,CCRD,EtBSE,AKCA,ANQA,AiBTA,AFAA,ASHA,ClBIC,EgBF2B,CCR9B,GjBUH,AiBVoB,CAAjB,CvBkBH,AiBTA,AFAA,CdAA,AgBAe,AFAA,CcXvB,C7BoByB,AwBZjB,CvBGkB,ADSA,C6BpB1B,CLQ4B,GpBGX,AOTJ,AXkBkB,CITJ,AWAnB,EcXR,CAAA,A5BWQ,GUTiB,AMSjB,EjBSA,CwBZiC,CAAC,MAAd,CAAqB,QAArB,EAApB,mBKRR,CAAA,QPU6B,IAAI,QAAA,CAAA,MAAJ,EAAY;ArBEpC,AKCA,AKVG,AXkBH,AiBTA,AFAA,AQRO,ACKJ,SDLI,EZDC,AaMA,MbNL,EYCI,CZDU,EYCgB,EAA1B,ACKJ,CbNA,OCOY,ACDA,ACFP,CWEW,OAAY;AIRpC,AlBGK,ACOG,ACDA,ACFA,AQEiC,ACHjC,ACGH,ACAG,IITR,EJSQ,GFHK,CXIC,AEHF,GDEG,AYAA,CAAC,CFHR,CXIY,AEHF,CWEV,CZAY,AUHE,CXIC,AEHF,GePrB,CfOQ,CFGoB,AWJpB,CMNR,EhBSQ,IDCA,CiBVR,AbGoB,CaHpB,CXGsB,QOMqB,KAAM,CAAC,WAAP,CAAmB,IAAtD,YITR,CAAA;AjBWQ,ACDH,AKNG,AFAA,AOGH,AEGG,MPNA,AFAA,KJOK,AaDA,EPNE,AFAA,CEAC,AFAA,EJOR,CMPA,AFAA,ASMA,CPNY,AFAA,ESME,KAAd,GrBGQ,4CYTR,EEAA;AWHR,AzBaQ,AQFA,AEFA,AILH,AFAA,AMMG,IOVR,EzBaQ,GkBHK,ERDA,EVIE,AQFA,CREC,CUJC,CAAC,CVIV,CAAY,CQFZ,AEFqB,CAArB,EAAwB,CAAC,CQCzB,EOVR,AfSoC,CQCL,EOV/B,EfSyC,GbInB,AGAd,AJLqB,E6BR7B,CAAA,AZYyB,AFAA,IOFoB,CRDT,CAAiB,EQCJ,IRDzC,AQC6C,ERDQ,CAAC,EAAtD,EAAyD,SQCZ,CAAA,MOVrD,CAAA,OPUiD,EAAzC;ArBIA,AEhBR,ADAA,AEgBQ,AQFH,AEFO,AdDJ,AiBIA,AFAA,AOFA,AHfR,AMcQ,ACZR,AjBFA,ONEA,ADAA,AiBFA,AOEA,AjBFA,CNEA,ADAA,AiBFA,AOEA,AjBFA,Caea,CtBFD,CCKC,AGAA,AJLA,AiBIA,AFAA,AUHA,CXAE,CAAC,AYZhB,CjBFA,ETakB,A0BXlB,CDYQ,AhBdR,CKcqB,AWAD,CrBIZ,CaDA,AFAA,CdCA,AgBDe,AFAA,AWfvB,CzBgBwB,AGAA,AelBxB,CVAA,CNEA,ADAA,CFWQ,AmBbR,CfkBQ,CDhBR,ADAA,AFW6B,AsBErB,CGDA,CXAQ,AWAe,CXAE,ACGzB,AOF0B,CXPtB,AGMI,CGGR,ChBCA,AaJ4B,AWA5B,GDAgB,GLdxB,GLcgB,CXZhB,ADAA,CYYY,EAAoC,CQCG,IAAI,IAAI,mBAAA,CAAA,iBAAJ,EAA/C;AOVR,A5BcK,AGAA,AInBL,AHAA,AKCA,AHDA,AISQ,AGMQ,AdDJ,AiBIP,AFAA,AKlBL,ACAA,ACgBQ,AEDA,ACAH,AGfL,ADAA,IEKA,ArBLA,AHAA,AKCA,AHDA,AqBAA,ADAA,EHeQ,CJfR,ACAA,CDAA,ACAA,CCgBa,CRDG,CcfhB,ADAA,EhBSe,AXKE,AwBCF,CHff,AGegB,AIfhB,ADAA,CnBAA,AHAA,CiBgBQ,CRDe,AOfvB,AGeQ,ChBfR,AHAA,AKCA,ACQoB,AGMI,AUAJ,CjBfpB,AegBuB,EZfvB,AIcgB,AcfhB,ADAA,CpBAA,AOe4B,AdDhB,A4BdZ,ADAA,CNAA,CVSQ,CHTR,AHAA,ALc6B,AoBd7B,AEgB6B,CdhB7B,AHAA,CwBKA,CnBJA,AUDA,CVCA,AHDA,APciC,AsBEA,COXjC,AtBLA,AMeqB,CWAY,AIfjC,ADAA,CCAA,ADAA,CLgBqC,GEDC,CKVtC,CAAA,AhBUoC,AbDP,CQd7B,AHAA,CGAA,AHAA,ALcY,CsBEyB,CAAA,GZfrC,AUDA,CVCA,EIcgB,AQCiB,AEDzB,EFCA,KfhBR,CAAA,kBsBKA,CAAA;AvBFA,AKOK,AEMG,ACAQ,AdDP,AsBEJ,AEDA,OlBbL,CAAA,EQagB,CDAH,KCAS,GAAG,CRbzB,AOaQ,GPbR,AOayB,CCAK,GSHZ,EVGV,MPbR,AQayB,CAAiB,CAAjB,ASHY,CTGrB;AeVhB,AnBJA,AHAA,AMeK,ACAW,ASHR,AKbR,ADAA,IEKA,ArBJA,AHAA,AKAA,AHAA,AqBDA,ADAA,MJac,OAAO,ChBZrB,CsBIA,CnBJA,AaYwB,AKbxB,ADAA,CpBCA,CsBIA,CnBJA,AkBDA,ADAA,EJa6B,GhBZ7B,AKiBiB,CiBbjB,AtBJA,CsBIA,AnBJA,AkBDA,ADAA,CjBCA,AkBDA,ADAA,IJawB,CAAgB,QAAhB,ChBZxB,AgBYiD,ChBZjD,GqBDA,ADAA,CCAA,ADAA,GJawB,CAAhB,GbZR,CmBIA,AnBJA,CmBIA;AjBcQ,AEFK,AdDL,WYGK,EZHE,KYGP,AZHY,GYGG,IAAI,EZHnB,AyBCO,MbEY,CAAA,MAAJ,EAAf;AiBbR,AnBJA,AEkBK,AEFI,AdDJ,AkBjBL,AFAA,AOcQ,AEIA,IIZR,AnBJA,AHCA,AqBDA,ADAA,GTFA,AFAA,CEAA,AFAA,EOcY,CEIC,CfhBb,GAAA,CmBIA,CNQQ,AEIA,CAAY,CIZpB,ANQqB,GbZrB,AQFA,AFAA,ASkBQ,CfhBR,EQFA,AFAA,CaMA,CAAA,OlBKkB,KOXlB,AFAA,CLW6B,EDT7B,CAAA,emBIA,CAAA;AlBMQ,AYGI,AEIP,WdPQ,IYGM,OAAO,CZHlB,AYGmB,CZHD,EYGP,CAAY,CZHvB,CAAuB,IAAvB,CWOc,YCJH,CAAP;AMNZ,A5BRA,AGCA,AOWK,AGQG,AGlBR,AFAA,AOiBQ,ACJC,IMPT,AnBLA,GTHA,AGCA,AaCA,AFAA,CdFA,AGCA,AaCA,AFAA,EDkBY,AQDA,MRCM,CVnBlB,EkBkBqB,CrBnBrB,AGCA,AUmBsB,EQDE,CrBnBxB,CaoBQ,EACA,CebR,APW6B,ElBlB7B,AaCA,AFAA,CcMA,EZNA,AFAA,GdFA,E4BQA,CAAA,OPWwB,CAAwB,OLjBhD,AFAA,KOiBwB,EAAhB,uBOXR,CAAA;ArBLI,AHAA,ASmBQ,AUrBZ,OAAA,CVqBY,AUrBZ,EAAA,GAAA,EVqBmB,AUrBnB,CVqBoB,GAAR,CAAY,KTnBD,CGAA,GImBH,EPnBhB,CGAA,CHAmC,CGAA,GImBL,KEAtB,CTnBR,EAAqD,IGArD,EAA0D;AqBM9D,ArBN8D,AHAL,AOoBjD,ACzBR,ACyBY,AQHJ,ACHA,IMRR,ENQQ,CVnBR,CAAA,ACyBY,GFAC,AUHA,ECHE,CVnBf,ACyBkB,ASNF,GVnBhB,ACyBqB,ASNb,CXMA,AWNY,CXMC,CiBdrB,CfcyB,EedzB,AhBXA,GSsBQ,CVGA,AUHqB,CVGC,CEAL,CedzB,AfcyB,CedzB,GjBcQ,EEAa,CAAW,CAAX,EAAc,AQH3B,CRGa,AQHsB,CRG/B,ASNJ,QDGA,mBOXR,CAAA;qClBMkB;AkBLlB,ArBP8D,AHAL,AMajD,ACSA,AEDI,Ad1BZ,AsBuBQ,ACHA,IMRR,G7BZA,CAAA,EWkBY,CWKC,ACHA,EXOE,AEDE,Ed1BjB,CWkBkB,CCSV,CZ3BR,AsBuBQ,CXLa,AWKA,ECHb,CAAgB,ETMZ,CAAiB,CSNrB,CMRR,A7BZA,AsBuBQ,ACHqB,ETMjB,CedZ,AfckC,KSN1B,CTMI,CedZ,AlBMuC,CkBNvC,IlBM4C,MAApC,mCkBNR,CAAA;AjBgBK,AEDI,AQHJ,AGtBL,OAAA,CAAA,aAAA,GAAA,aAAA;AIWA,ArBPQ,AHAA,AMcA,AYCA,IMRR,OlBOa,AYCA,MAAL,GMRR,GAAA,AlBOQ,CAAkB,MkBP1B,ArBPc,AHAA,CwBOd,AlBOQ,CAA0B,IHd1B,AHAA,MMc0B,IAAI,EAAG,qBkBPzC,CAAA;ArBNQ,AHAA,AMcI,AGQJ,ASPH,QZDO,EHdC,AHAA,CSsBA,GHRK,EGQV,CAAW,CHRG,ENdd,GAAkB,ASsBlB,ENtBA,AGcqB,AGQF,CAAnB,ENtBuB,AMsBD,CHRlB,AGQJ,ITtBA,UGAA;AqBOR,ArBT8D,AHAL,AMiBhD,AGSD,IejBR,GlBMQ,MGWO,GejBf,GAAA,AfiBQ,OejBR,CAAA,OjBgByB,MAAY,WiBhBrC,CAAA;ArBNK,AHAA,AOuBG,AECH,WFDQ,OAAL,CAAa,aAAb,CAA2B,IAA3B;AiBhBR,AlBSQ,IkBTR,ElBSQ,MAAM,IAAI,GAAV,CkBTR,GAAA,INSkB,GMTlB,CAAA,MNSqC,sBMTrC,CAAA;AlBWQ,ACOA,AU7BR,ACqBQ,MZCA,CWtBR,CAAA,ECqBc,GZCC,ACOA,CDPC,GAAR,ACOA,CDPY,AWtBpB,GAAA,ECqB2B,CZCnB,EYDsB,CKrBf,ADAA,ILAf,ACqBmC,GhBlBb,OgBkBQ,CAAgB,OAAhB,CAAwB,QAAxB,CAAtB;AMTR,AtBRQ,AImBH,ACOA,AgB7BG,ADAA,IEWR,EDXQ,ADAA,OpBGO,AqBHA,ADAA,CCAC,ADAA,GpBGG,AqBHX,ADAA,CCAY,ADAA,KEWpB,GAAA,MtBRmB,CsBQnB,AtBRmB,AO2BF,CenBjB,OfmB+B,KP3BhB,AqBHP,ADAA,CpBGyB,GAAlB,EAAuB,GAAvB,CAAP,SsBQR,CAAA;AtBPK,AO4BG,ASTA,AKtBA,ADAA,Mb+BA,ISTI,CKtBC,ADAA,Eb+BE,CAAC,GAAR,CAAY,Ac/BZ,ADAA,CCAa,ADAA,IJsBI,KAAK,CflBb,AHAA,AkBkBc,CAAvB,CKtBA,ADAA,CJsB0B,AKtBA,ADAA,EjBEZ,EkBFgB,ADAA,Wb+B9B,Kc/B8B,ADAA,CCAA,ADAA,cCAJ,ADAA,ECA1B,ADAA;AEWR,ArBNQ,AHAA,AKFA,AI6BA,ASTI,AKtBP,ADAA,IEUL,EfqBQ,IN3BG,AHAA,EwBMX,AfqBc,CJ7BC,AI6BA,EerBf,ArBNgB,AHAA,AkBkBG,EbpBA,KmBQnB,AfqBQ,ASTkB,CMZ1B,ArBNQ,AHAA,AS2BiB,ASTE,EfjBf,AHAA,CkBiBO,CAAY,CTSvB,IN1BW,AHAA,CGAC,AHAA,AKHD,CAAA,EFGP,AHAA,CGAY,AHAA,MwBKxB,CAAA,InBRe,CAAmB,GAAnB,EAAwB,QAAA,CLGW,AKHX,AaoBpB,CAAP,IlBjB2C,CKHhB,CAAO,IAAP,CAAY,CFGY,AEHxB,ELGW,AKHI,CLGY,AKH3B,CAAxB,CFGqD,AEH5D,MLG0C,EAA1B,GAAuD,IGAhB,CAAqB,MHAxE,EGAmD,AHDvD,EGCgB,GAAyE,AHErF,OAAO,CAAC,EGFR,CHEA,CGHJ,AHGgB,KGAZ,OAAO,CAAC,GAAR,CAAY,mBHAZ,iBGAA;AACP,AHAA,AKLA,AI6BA,ASTI;AMZT,IAAA,eAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;ANeQ,EhB7BkC,SgB6B7B,KhB7B6B,CAAA,IgB6BlC,CAAgB,MAAhB,CAAuB,aAAvB,EAAsC,CAAtC;AMdR,AlBnBA,ACGA,EgBAoC,ADAA,EEgBpC,GlBnBA,ACGA,CiBgBA,AlBnBA,ACGA,CgBAoC,ADAA,CCAA,ADAA,CEgBpC,GlBnBA,GAAA,CkBmBA,CAAA,EjBhBA,EDHA,CCGA,EEuCkB,QAAgB,GFvClC,AEuC6C,GAAS,MevBtD,CAAA;AtBfA,AOuCQ,ASTA,EfhC4B,AHAD,AKGQ,IIsCnC,ASTA,ChB9BR,CAAA,IOuCc,CNzCsB,AHAD,ASy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","file":"app.c61986b1.js","sourceRoot":"..\\src","sourcesContent":["export default class GameState {\r\n    // The instance is stored here in static and private so that it can be reach only from within any instance of this class\r\n    private static _instance: GameState;\r\n    private _isPaused: boolean;\r\n\r\n    // Private, can't be called from outside the scope of this class to avoid the creation of multiple instances of our singleton\r\n    private constructor() \r\n    { \r\n        this._isPaused = false;\r\n    }\r\n\r\n    // Creates an instance if it doesn't exist yet and returns it, if it does, returns the existing instance instead\r\n    public static getInstance(): GameState {\r\n        if (!this._instance) {\r\n            this._instance = new GameState();\r\n        }\r\n\r\n        return this._instance;\r\n    }\r\n\r\n    // Some logic performed by the singleton, in this case it toggles the isPaused variable on/off. \r\n    public togglePause() {\r\n        this._isPaused = !this._isPaused;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { IBehaviour } from \"./strategies/IBehaviour\";\r\n\r\nexport class AIController {\r\n\r\n    // The strategy\r\n    private _behaviour: IBehaviour;\r\n\r\n    constructor(behaviour: IBehaviour) {\r\n        this._behaviour = behaviour;\r\n    }\r\n\r\n    // Change the AI behaviour 'strategy'\r\n    public setBehaviour(behaviour: IBehaviour) {\r\n        this._behaviour = behaviour;\r\n    }\r\n\r\n    // Does its current behaviour\r\n    public doBehaviour(): void {\r\n        this._behaviour.doBehaviour();\r\n    }\r\n}\r\n","import { IBehaviour } from \"./IBehaviour\";\r\n\r\nexport class NeutralBehaviour implements IBehaviour {\r\n    public doBehaviour(): void {\r\n        console.log(\"AI minds its own bussines...\");\r\n    }\r\n}","import { IBehaviour } from \"./IBehaviour\";\r\n\r\nexport class FleeingBehaviour implements IBehaviour {\r\n    public doBehaviour(): void {\r\n        console.log(\"AI tries to flee...\");\r\n    }\r\n}","import { IEnemy } from \"./IEnemy\";\r\n\r\n// Base class for enemies\r\nexport class BaseEnemy implements IEnemy {\r\n    protected health: number;\r\n    protected isActive: boolean;\r\n    \r\n    public constructor(health: number){\r\n        this.health = health;\r\n        this.isActive = false;\r\n    }\r\n\r\n    // Can be overriden by specific enemies\r\n    public attack(): void{}\r\n\r\n    // 'Spawns' the enemy\r\n    public spawn(): void{\r\n        console.log(\"Enemy spawned.\");\r\n        this.isActive = true;\r\n    }\r\n}","import { BaseEnemy } from \"./BaseEnemy\";\r\n\r\nexport class ShootingEnemy extends BaseEnemy {\r\n    protected rateOfFire: number;\r\n\r\n    public constructor(health: number, rateOfFire: number){\r\n        super(health);\r\n        this.rateOfFire = rateOfFire;\r\n    }\r\n\r\n    public attack(): void{\r\n        if(this.isActive)\r\n            console.log(\"Enemy shooting every \" + this.rateOfFire.toString() + \" seconds.\");\r\n        else\r\n            console.log(\"Enemy not spawned... can't attack.\");\r\n    }\r\n}","import { IEnemy } from \"./Enemies/IEnemy\";\r\n\r\n// Base class for enemy factories\r\nexport abstract class EnemyFactory {\r\n\r\n    // Abstract method to be overriden by specific enemy factories\r\n    public abstract createEnemy(): IEnemy;\r\n\r\n    // Does some stuff using the create enemy, in this case it creates an enemy, spawns it and then has it attack\r\n    public spawnEnemy(): void {\r\n        const enemy = this.createEnemy();\r\n  \r\n        // Instantiate enemy and do some stuff\r\n        enemy.spawn();\r\n        enemy.attack();\r\n    }\r\n}","import { ShootingEnemy } from \"./Enemies/ShootingEnemy\";\r\nimport { IEnemy } from \"./Enemies/IEnemy\";\r\nimport { EnemyFactory } from \"./EnemyFactory\";\r\n\r\nexport class ShootingEnemyFactory extends EnemyFactory {\r\n\r\n    // Create a shooting enemy\r\n    public createEnemy(): IEnemy {\r\n        return new ShootingEnemy(100, 0.5);\r\n    }\r\n}","import { BaseEnemy } from \"./BaseEnemy\";\r\n\r\nexport class ExplodingEnemy extends BaseEnemy  {\r\n    protected explosionRadius: number;\r\n\r\n    public constructor(health: number, explosionRadius: number){\r\n        super(health);\r\n        this.explosionRadius = explosionRadius;\r\n    }\r\n\r\n    public attack(): void{\r\n        if(this.isActive)\r\n            console.log(\"Enemy blowing up with a radius of \" + this.explosionRadius.toString() + \" meters.\");\r\n        else\r\n            console.log(\"Enemy not spawned... can't attack.\");\r\n    }\r\n}","export class Random{\r\n    static next(min: number, max: number){\r\n        return Math.floor(Math.random()*(max-min+1)+min);\r\n    }\r\n}","import { IEnemy } from \"./Enemies/IEnemy\";\r\nimport { EnemyFactory } from \"./EnemyFactory\";\r\nimport { ExplodingEnemy } from \"./Enemies/ExplodingEnemy\";\r\nimport { Random } from \"~ts/helper/Random\";\r\n\r\nexport class ExplodingEnemyFactory extends EnemyFactory {\r\n\r\n    // Create an exploding enemy\r\n    public createEnemy(): IEnemy {\r\n        return new ExplodingEnemy(100, Random.next(4, 7));\r\n    }\r\n}","export class Config{\r\n    private _lives: number = 1;\r\n    private _playerNames: string[] = [];\r\n\r\n    setLives(lives:number) {\r\n        this._lives = lives;\r\n    }\r\n\r\n    getLives(){\r\n        return this._lives;\r\n    }\r\n\r\n    addPlayerName(name:string){\r\n        this._playerNames.push(name);\r\n    }\r\n\r\n    // Prints the object to console\r\n    printToConsole(){\r\n        var output = \"config(lives:\" + this._lives;\r\n        \r\n        this._playerNames.forEach(name => {\r\n            output += \", \" + name;\r\n        });\r\n\r\n        output += \")\";\r\n\r\n        console.log(output);\r\n    }\r\n}","import { Config } from \"./Config\";\r\nimport { IConfigBuilder } from \"./IConfigBuilder\";\r\n\r\nexport class ConfigBuilder implements IConfigBuilder {\r\n    private _config: Config;\r\n\r\n    // We create a new builder for a new config, so we create a new config to build on here\r\n    constructor() {\r\n        this._config = new Config();\r\n    }\r\n\r\n    // We reset the builder when we get the config, so it's ready for a new config to be build\r\n    public getConfig(): Config {\r\n        const config = this._config;\r\n        this.reset();\r\n        return config;\r\n    }\r\n\r\n    // Reset the builder for a new config\r\n    private reset() {\r\n        this._config = new Config();\r\n    }\r\n\r\n    // Chain methods to build with - we return the builder object so that we can chain calls\r\n    public setLives(amount: number): ConfigBuilder {\r\n        this._config.setLives(amount);\r\n\r\n        return this;\r\n    }\r\n\r\n    public addPlayerName(name: string): ConfigBuilder {\r\n        this._config.addPlayerName(name);\r\n\r\n        return this;\r\n    }\r\n}","export class Bullet{\r\n    private _isActive: boolean;\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(x: number, y: number){\r\n        this._isActive = true;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public isSpawned(){\r\n        return this._isActive;\r\n    }\r\n\r\n    public setActive(active: boolean){\r\n        this._isActive = active;\r\n    }\r\n}","import { Bullet } from \"./Bullet\";\r\n\r\nexport class BulletPool{\r\n    private _bulletPool: Array<Bullet>; \r\n\r\n    public constructor(){\r\n        this._bulletPool = new Array<Bullet>();\r\n    }\r\n\r\n    getBullet() : Bullet {\r\n        var bullet = null;\r\n\r\n        // Try to find a bullet that isn't active at the moment\r\n        for (var i: number = 0; i < this._bulletPool.length; i++){\r\n            if(!this._bulletPool[i].isSpawned()){\r\n                console.log(\"Bullet found... reusing.\");\r\n                bullet = this._bulletPool[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        // No bullet found, we'll make a new one and add it to the pool so that the pool scales with object requirements\r\n        if (bullet == null) \r\n        {\r\n            console.log(\"Making new bullet...\");\r\n            bullet = new Bullet(0, 0); // Sets the bullet to active as well\r\n            this._bulletPool.push(bullet);\r\n        }\r\n\r\n        this.spawn(bullet, 0, 0);\r\n\r\n        return bullet;\r\n    }\r\n\r\n    // Returns bullet to 'available' pool\r\n    returnBullet(bullet: Bullet) : void\r\n    {\r\n        console.log(\"Returning bullet to pool...\");\r\n        bullet.setActive(false);\r\n    }\r\n\r\n    // 'Spawns' the given bullet at x and y 2D screen coordinates\r\n    private spawn(bullet: Bullet, x: number, y: number){\r\n        bullet.setActive(true);\r\n        bullet.x = x;\r\n        bullet.y = y;\r\n    }\r\n}","import { ICalendarAdapter } from \"../ICalendarAdapter\";\r\nimport { OfficeCalendar } from \"../adaptees/OfficeCalendar\";\r\n\r\n// Specific adapter made for the 'Office365 API', we can use this in our code and it doesn't matter if Office365 API changes their method names \r\nexport class OfficeCalendarAdapter implements ICalendarAdapter {\r\n    private _calendar: OfficeCalendar;\r\n\r\n    constructor(calendar: OfficeCalendar) {\r\n        this._calendar = calendar;\r\n    }\r\n\r\n    // These methods adapt to the specific adaptee's method names\r\n    public postOccurrence(): void {\r\n        this._calendar.postEvent();\r\n    }\r\n\r\n    public getOccurrences(): void {\r\n        this._calendar.getEvents();\r\n    }\r\n}","// Some fake API class that lets us post and get events from the calendar\r\nexport class OfficeCalendar {\r\n    public postEvent(): void {\r\n        console.log(\"Posting event to Office Calendar using their method name.\");\r\n    }\r\n\r\n    public getEvents(): void {\r\n        console.log(\"Retrieving Office events using specific method name.\");\r\n    }\r\n}","import { ICalendarAdapter } from \"../ICalendarAdapter\";\r\nimport { GoogleCalendar } from \"../adaptees/GoogleCalendar\";\r\n\r\n// Specific adapter made for the 'Google API', we can use this in our code and it doesn't matter if Google API changes their method names \r\nexport class GoogleCalendarAdapter implements ICalendarAdapter {\r\n    private _calendar: GoogleCalendar;\r\n\r\n    constructor(calendar: GoogleCalendar) {\r\n        this._calendar = calendar;\r\n    }\r\n\r\n    // These methods adapt to the specific adaptee's method names\r\n    public postOccurrence(): void {\r\n        this._calendar.scheduleMeeting();\r\n    }\r\n\r\n    public getOccurrences(): void {\r\n        this._calendar.getMeetings();\r\n    }\r\n}","// Some fake API class that lets us post and get events from the calendar\r\nexport class GoogleCalendar {\r\n    public scheduleMeeting(): void {\r\n        console.log(\"Scheduling meeting to Google Calendar using their method name.\");\r\n    }\r\n\r\n    public getMeetings(): void {\r\n        console.log(\"Retrieving Google meetings using specific method name.\");\r\n    }\r\n}","export class MailRepository{\r\n    public insertMessage(contactId: number){\r\n        console.log(\"Inserted mail message into database with contactId \" + contactId + \".\");\r\n    }\r\n}","export class ContactRepository{\r\n    public getContactId(){\r\n        console.log(\"Fetching contact...\");\r\n        return 1;\r\n    }\r\n}","export class Logger{\r\n    public writeLog(){\r\n        console.log(new Date().toDateString() + \" logged incoming mail.\");\r\n        return 1;\r\n    }\r\n}","import { MailRepository } from \"./MailRepository\";\r\nimport { ContactRepository } from \"./ContactRepository\";\r\nimport { Logger } from \"./Logger\";\r\n\r\nexport class MailFacade {\r\n    // The sub-systems\r\n    private _mailRepository: MailRepository;\r\n    private _contactRepository: ContactRepository;\r\n    private _logger: Logger;\r\n\r\n    // Allow the sub-systems to be passed or newly instantiated, depending on application needs\r\n    constructor(mailRepository: MailRepository = new MailRepository(), contactRepository: ContactRepository = new ContactRepository(), \r\n            logger: Logger = new Logger()) \r\n    {\r\n        this._mailRepository = mailRepository || new MailRepository();\r\n        this._contactRepository = contactRepository || new ContactRepository();\r\n        this._logger = logger || new Logger();\r\n    }\r\n\r\n    // A 'short-cut' method utilizes the multiple sub-systems to perform a single 'main' task\r\n    public saveMessage(): void {\r\n        let contactId = this._contactRepository.getContactId();\r\n        this._mailRepository.insertMessage(contactId);\r\n        this._logger.writeLog();\r\n    }\r\n}","import { IObserver } from \"../observer/IObserver\";\r\nimport { IObservable } from \"./IObservable\";\r\n\r\nexport class HealthManager implements IObservable {\r\n    public health: number = 0;\r\n\r\n    private _observers: IObserver[] = [];\r\n\r\n    public constructor(health: number){\r\n        this.health = health; \r\n    }\r\n\r\n    // Attach and detach observers / subscribers\r\n    public attach(observer: IObserver): void {\r\n        const isExist = this._observers.includes(observer);\r\n        if (isExist) {\r\n            return console.log(\"Already attached.\");\r\n        }\r\n\r\n        console.log(\"Attached new observer.\");\r\n        this._observers.push(observer);\r\n        this.notify();\r\n    }\r\n\r\n    public detach(observer: IObserver): void {\r\n        const observerIndex = this._observers.indexOf(observer);\r\n\r\n        // Not found, can't detach\r\n        if (observerIndex === -1) {\r\n            return console.log(\"Can't detach - observer not found.\");\r\n        }\r\n\r\n        // Detaching\r\n        this._observers.splice(observerIndex, 1);\r\n        console.log(\"Detached an observer.\");\r\n    }\r\n\r\n    // Triggers an update to all subscribers\r\n    public notify(): void {\r\n        console.log(\"Notifying observers of change.\");\r\n\r\n        for (const observer of this._observers) \r\n        {\r\n            observer.update(this);\r\n        }\r\n    }\r\n\r\n    // Logic that defines a changing state and notifies subscribers of the change\r\n    public takeDamage(damage: number) : void{\r\n        this.health -= damage;\r\n        this.notify();\r\n    }\r\n\r\n    public regenerateHealth(health: number) : void{\r\n        this.health += health;\r\n        this.notify();\r\n    }\r\n}\r\n","import { IObserver } from \"./IObserver\";\r\nimport { HealthManager } from \"../observable/HealthManager\";\r\n\r\nexport class UI implements IObserver{\r\n\r\n    private _healthLabel: string = \"0\";\r\n\r\n    // This method is from the IObserver interface and is called by the IObservable (HealthManager) when a change happens to health\r\n    public update(healthManager: HealthManager)\r\n    {\r\n        this._healthLabel = healthManager.health.toString();\r\n        this.displayHealth();\r\n    }\r\n\r\n    public displayHealth(){\r\n        console.log(\"HEALTH: \" + this._healthLabel);\r\n    }\r\n}","import { State } from \"./states/State\";\r\n\r\nexport class MovingContext{\r\n    private _state: State;\r\n\r\n    constructor(state: State) {\r\n        this._state = state;\r\n        this._state.setContext(this);\r\n    }\r\n\r\n    // Change state\r\n    public transitionTo(state: State): void {\r\n        console.log(`Transition to ${(<any>state).constructor.name}.`);\r\n        this._state = state;\r\n        this._state.setContext(this);\r\n    }\r\n\r\n\r\n    public move(): void {\r\n        this._state.move();\r\n    }\r\n\r\n}","import { MovingContext } from \"../MovingContext\";\r\n\r\nexport abstract class State{\r\n    protected context!: MovingContext;\r\n\r\n    public setContext(context: MovingContext) {\r\n        this.context = context;\r\n    }\r\n\r\n    public abstract move(): void;\r\n}","import { State } from \"./State\";\r\nimport { EnergeticState } from \"./EnergeticState\";\r\n\r\nexport class ExhaustedState extends State {\r\n    public move(){\r\n        console.log(\"Exhausted State - walking.\");\r\n        this.context.transitionTo(new EnergeticState());\r\n    }\r\n}","import { State } from \"./State\";\r\nimport { ExhaustedState } from \"./ExhaustedState\";\r\n\r\nexport class EnergeticState extends State {\r\n    public move(){\r\n        console.log(\"Energetic State - running.\");\r\n        this.context.transitionTo(new ExhaustedState());\r\n    }\r\n}","import GameState from \"../5_singleton/GameState\";\r\nimport { AIController } from \"../1_strategy/AIController\";\r\nimport { NeutralBehaviour } from \"../1_strategy/strategies/NeutralBehaviour\";\r\nimport { FleeingBehaviour } from \"../1_strategy/strategies/FleeingBehaviour\";\r\nimport { ShootingEnemyFactory } from \"../2_factory/ShootingEnemyFactory\";\r\nimport { ExplodingEnemyFactory } from \"../2_factory/ExplodingEnemyFactory\";\r\nimport { ConfigBuilder } from \"../3_builder/ConfigBuilder\";\r\nimport { BulletPool } from \"../4_object_pooler/BulletPool\";\r\nimport { Bullet } from \"../4_object_pooler/Bullet\";\r\nimport { ICalendarAdapter } from \"../6_adapter/ICalendarAdapter\";\r\nimport { OfficeCalendarAdapter } from \"../6_adapter/adapters/OfficeCalendarAdapter\";\r\nimport { OfficeCalendar } from \"../6_adapter/adaptees/OfficeCalendar\";\r\nimport { GoogleCalendarAdapter } from \"../6_adapter/adapters/GoogleCalendarAdapter\";\r\nimport { GoogleCalendar } from \"../6_adapter/adaptees/GoogleCalendar\";\r\nimport { MailFacade } from \"../7_facade/MailFacade\";\r\nimport { MailRepository as MailRepository } from \"../7_facade/MailRepository\";\r\nimport { ContactRepository } from \"../7_facade/ContactRepository\";\r\nimport { Logger } from \"../7_facade/Logger\";\r\nimport { HealthManager } from \"../8_observer/observable/HealthManager\";\r\nimport { UI } from \"../8_observer/observer/UI\";\r\nimport { MovingContext } from \"../9_state/MovingContext\";\r\nimport { EnergeticState } from \"../9_state/states/EnergeticState\";\r\n\r\nexport default class PatternTester{\r\n    \r\n    constructor() {\r\n        \r\n    }\r\n\r\n    testAll(): void{\r\n\r\n        console.log(\"--- \" + this.testStrategyPattern.name + \" ---\");\r\n        this.testStrategyPattern();\r\n\r\n        console.log(\"--- \" + this.testFactoryPattern.name + \" ---\");\r\n        this.testFactoryPattern();\r\n\r\n        console.log(\"--- \" + this.testBuilderPattern.name + \" ---\");\r\n        this.testBuilderPattern();\r\n\r\n        console.log(\"--- \" + this.testObjectPooler.name + \" ---\");\r\n        this.testObjectPooler();\r\n\r\n        console.log(\"--- \" + this.testSingletonPattern.name + \" ---\");\r\n        this.testSingletonPattern();\r\n\r\n        console.log(\"--- \" + this.testAdapterPattern.name + \" ---\");\r\n        this.testAdapterPattern();\r\n\r\n        console.log(\"--- \" + this.testFacadePattern.name + \" ---\");\r\n        this.testFacadePattern();\r\n\r\n        console.log(\"--- \" + this.testObserverPattern.name + \" ---\");\r\n        this.testObserverPattern();\r\n\r\n        console.log(\"--- \" + this.testStatePattern.name + \" ---\");\r\n        this.testStatePattern();\r\n    }\r\n\r\n    private testStatePattern(){\r\n        const movingContext = new MovingContext(new EnergeticState());\r\n\r\n        // Moves based on its current state and then changes state\r\n        movingContext.move();\r\n        movingContext.move();\r\n        movingContext.move();\r\n    }\r\n\r\n    private testObserverPattern(){\r\n        const ui = new UI();\r\n        const healthManager = new HealthManager(100);\r\n\r\n        // Attach and receive first update of initial health\r\n        healthManager.attach(ui);\r\n\r\n        // UI receives updates on health changes\r\n        healthManager.takeDamage(20);\r\n        healthManager.takeDamage(20);\r\n        healthManager.regenerateHealth(10);\r\n\r\n        healthManager.detach(ui);\r\n\r\n        // UI no longer observing, doesn't receive update on health\r\n        healthManager.regenerateHealth(10);\r\n    }\r\n\r\n    private testFacadePattern(){\r\n        // We have to perform these actions multiple times across multiple sections in our code\r\n        let contactId = new ContactRepository().getContactId();\r\n        new MailRepository().insertMessage(contactId);\r\n        new Logger().writeLog();\r\n\r\n        // Instead, we can use a facade\r\n        new MailFacade().saveMessage();\r\n    }\r\n\r\n    private testAdapterPattern(){\r\n        let adapter: ICalendarAdapter = new OfficeCalendarAdapter(new OfficeCalendar());\r\n        adapter.getOccurrences();\r\n        adapter.postOccurrence();\r\n\r\n        // Now we try the same methods with Google's API methods, the code will still work\r\n        adapter = new GoogleCalendarAdapter(new GoogleCalendar());\r\n        adapter.getOccurrences();\r\n        adapter.postOccurrence();\r\n    }\r\n\r\n    private testObjectPooler(){\r\n        const pool = new BulletPool();\r\n\r\n        // Fetch a bullet from the pool or create one if none found\r\n        var bullet = pool.getBullet();\r\n\r\n        // Returning the bullet to the pool after it's lifecycle is through\r\n        pool.returnBullet(bullet);\r\n\r\n        var bullets = new Array<Bullet>(2);\r\n\r\n        // Will reuse the previous fired bullet\r\n        bullets[0] = pool.getBullet();\r\n\r\n        // Will make a new bullet and extend the bullet pool to 2 bullets\r\n        bullets[1] = pool.getBullet();\r\n\r\n        pool.returnBullet(bullets[0]);\r\n        pool.returnBullet(bullets[1]);\r\n    }\r\n\r\n    private testFactoryPattern(){\r\n        // Spawn a shooting enemy\r\n        const shootingEnemyFactory = new ShootingEnemyFactory();\r\n        shootingEnemyFactory.spawnEnemy();\r\n\r\n        // Spawn exploding enemy\r\n        const explodingEnemyFactory = new ExplodingEnemyFactory();\r\n        explodingEnemyFactory.spawnEnemy();\r\n\r\n        // Just create one, so we can do whatever with it\r\n        const enemy = explodingEnemyFactory.createEnemy();\r\n\r\n        // Can't attack, not spawned yet\r\n        enemy.attack();\r\n    }\r\n\r\n    private testBuilderPattern(){\r\n        const builder = new ConfigBuilder();\r\n\r\n        // Create and print one using chaining\r\n        var config = builder.setLives(4).addPlayerName(\"Johnny\").addPlayerName(\"Jimmy\").addPlayerName(\"Bobby\").getConfig();\r\n        config.printToConsole();\r\n\r\n        // Create and print another one using chaining\r\n        config = builder.setLives(2).addPlayerName(\"Brrrrr\").getConfig();\r\n        config.printToConsole();\r\n    }\r\n\r\n    private testStrategyPattern(){\r\n        // Create controller and perform behaviour\r\n        const aiController = new AIController(new NeutralBehaviour());\r\n        aiController.doBehaviour();\r\n\r\n        // Change strategy\r\n        aiController.setBehaviour(new FleeingBehaviour());\r\n\r\n        // Same method called, different output due to different strategy\r\n        aiController.doBehaviour();\r\n    }\r\n    \r\n    // Testing Signleton usage\r\n    private testSingletonPattern(): void {\r\n        const s1 = GameState.getInstance();\r\n        const s2 = GameState.getInstance();\r\n    \r\n        if (s1 === s2) {\r\n            console.log('Singleton works, both variables contain the same instance.');\r\n        } else {\r\n            console.log('Singleton failed, variables contain different instances.');\r\n        }\r\n    }\r\n} ","import PatternTester from \"./ts/design_pattern_examples/0_test/PatternTester\"\r\n\r\n// Perform tests\r\nnew PatternTester().testAll();\r\n\r\n\r\n\r\n"]}