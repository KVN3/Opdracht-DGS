{"version":3,"sources":["ts/types/Vector2.ts","ts/types/Enums.ts","ts/types/MovementDirection.ts","ts/types/GameObject.ts","ts/helper/Tileset.ts","ts/objects/SnakeSegment.ts","ts/objects/Snake.ts","ts/user/InputHandler.ts","ts/helper/Random.ts","ts/objects/Food.ts","ts/user/CollisionHandler.ts","ts/objects/GroundTile.ts","ts/objects/Arena.ts","ts/types/Timer.ts","ts/Game.ts","ts/app.ts"],"names":[],"mappings":";;;;;AIAa,AHAb,IAAY,GGAC,CAAA,GHAb,IGAa,GAA0B,IAAI,IAAI,CAAC,SAAT,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,EAA7B,EAAiC,EAAjC,CAA1B;AACA,OAAA,CAAA,UAAA,GAA6B,IAAI,IAAI,CAAC,SAAT,CAAmB,EAAnB,EAAuB,CAAvB,EAA0B,EAA1B,EAA8B,EAA9B,CAA7B;AACA,AHFb,CAAA,MGEa,CAAA,GHFD,MGEC,CHFb,EGEyC,AHFtB,IGE0B,IAAI,CAAC,SAAT,CAAoB,EAApB,EAAwB,CAAxB,EAA2B,EAA3B,EAA+B,EAA/B,CAA5B;AACA,AHFT,EAAA,KGES,CAAA,CHFT,CAAA,OGES,AHFT,CAAA,EGEqC,EHFrC,CAAA,CGEyC,EHFzC,EGE6C,AHF7C,CGE8C,AHF9C,GAAA,IAAA,EGEqC,CAAoB,EAApB,EAAwB,CAAxB,EAA2B,EAA3B,EAA+B,EAA/B,CAA5B;AAEA,AHHT,EAAA,KGGS,CAAA,CHHT,CAAA,KGGS,EHHT,CGGmC,AHHnC,IGGuC,EHHvC,CAAA,CGG2C,CAAC,CHH5C,EAAA,CAAA,GAAA,EGGmC,CAAuB,CAAvB,EAA0B,AHH7D,EGGmC,EAA8B,EAA9B,EAAkC,EAAlC,CAA1B;AACA,AHHT,EAAA,KGGS,CAAA,CHHT,CAAA,OAAA,CGGS,AHHT,GGGsC,GHHtC,CGG0C,AHH1C,GAAA,CGG8C,CAAC,AHH/C,CAAA,GAAA,KGGsC,CAAmB,AHHzD,EGGsC,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,CAA7B;AACA,AHHT,AYFJ,EZEI,EYFQ,GTKC,CAAA,CHHT,CAAA,GYFJ,ITKa,AHHT,CAAA,EGGqC,IAAI,CHHzC,CAAA,EGG6C,CAAC,AHH9C,EAAA,CAAA,GAAA,GGGqC,CAAoB,EAApB,CHHrC,CGG6D,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,CAA5B;AUNb,ACAA,APDA,AJQa,AQRb,ANEA,ALGI,ACLJ,AKAA,ENKI,EaJJ,ACAA,APDA,AIAA,ANEA,AHEA,ADJA,AFAA,AUIA,AHJA,GHQa,CAAA,CIRb,APKI,CcJJ,AdII,CaJJ,AZDA,AKAA,CCAA,COCA,ATCA,CQDA,AZDA,AKAA,EKAA,ANEA,CFMa,AHHT,CAAA,COLJ,AIAA,CGCA,APDA,AJQyC,CUPzC,ACAA,AbDA,AKAA,COCA,AZDA,AKAA,CDEA,CFM6C,AEN7C,CLGI,CWLJ,AXKI,CWLJ,CRQiD,CWPjD,APDA,AJQkD,AHH9C,CcJJ,APDA,CPKI,ACLJ,CDKI,ACLJ,GDKI,GGGqC,AGRzC,COCA,AVO6D,AGR7D,COCA,CVOyC,AQRzC,CAAA,ANEA,ALGI,CGG6D,AENjE,EFMyC,EAA4B,EAA5B,EAAgC,EAAhC,CAA5B;AAGA,AHLZ,AYJD,AbGI,CCLJ,AYEA,EZFY,IGWC,CAAA,EHXM,CYEP,EZFA,OAAA,AYEZ,CZFY,ADKuC,CIMtC,ASTQ,GTSyB,GHXlC,CGWsC,IAAI,AHX1C,CGW2C,MHX3C,CAAA,EGWkC,CAAuB,CAAvB,EAA0B,CHX5D,CGWkC,EAA8B,AHXzD,EGW2B,AHXlC,CAAZ,CGWgF,EAAlC,CAAjC;AUTb,ACAA,APDA,AJWa,AQXb,ANEA,AODwB,AbG2B,EaH3B,ECAxB,ACAA,APDA,AIAA,ANEA,AJAA,AKGA,GHMa,CAAA,AJPU,CAA4B,EMFnD,AODwB,CAAA,CCAxB,ANDA,AIAA,CNEA,CSDA,CDAA,ANDA,AIAA,EGCA,GTCA,AODwB,CPCxB,AODwB,CCAxB,ANDA,AIAA,CECA,ANDA,AJWa,AQXb,GRWgD,ESVxB,CAAA,CTU4B,EWVpD,AFAwB,CEAxB,AFAwB,CTUgC,ASVhC,CTUiC,EETzD,AODwB,CPCxB,EQDA,ACAA,CDAA,ACAA,CPDA,AIAA,CJAA,AIAA,CRWgD,ASVxB,CTU6C,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,CAAnC,YWVb,CAAA,CAAA,KfGmC,CAAgB;AIQtC,AHLb,ACDI,AWL2B,AbGoB,AOCnD,EMJ+B,EZMnB,GGKC,CAAA,AJRyB,CAAa,EaHpB,CAAA,EZM/B,OYN+B,CAAA,GTWlB,CGPb,EHOiD,CFN1B,GEM8B,ADLjC,AUNW,CXK3B,AWL2B,EXKI,CEMsB,ASX1B,CTW2B,ASX3B,CAAA,GAAA,GXK3B,EEM6C,AFNM,CEMc,EAApB,EAAwB,ASX1C,ETWkB,EAA4B,EAA5B,EAAgC,EAAhC,CAApC,kBJRqC,CAAC;AcFnD,ACIa,AXOA,AQZb,ANEA,AHIsC,ADDiB,AWLd,ANIzC,CMJA,EAAY,CCCZ,ANAA,AIDA,ANEA,GSGa,AXOA,CWPA,AXOA,CQZb,GAAA,ACAqB,CVMwB,EUNjC,GCCZ,AXKkD,CYDrC,AHLb,CAAA,CECA,AVWa,CWPc,AFLf,CPEZ,AOFY,CTYiC,CWPhC,AZCyB,CGJtC,EQDA,AVWiD,CUXjD,AFDA,CAAA,ERYqD,ASZzC,CTY0C,AEVtD,CAAA,GOFY,KTYiC,CAAwB,CSZzD,CTYiC,ASZjC,ETY6D,EAA5B,CUX7C,CAAA,AVW6E,EAAhC,CSZjC,CTYqE,EAApC,ASZxB,CTYR,CSZD,CAAZ,EPEA,CAAA;ASIa,AXQA,AHRb,AEA4D,AHHT,CCGnD,McAa,AXQA,CWRA,AXQA,GHRD,OGQC,EWRA,CXQ6B,AHR1C,EcA4B,AdAN,EGQwB,CWRjC,GXQqC,CAAC,SAAT,CAAwB,CAAxB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,CAA7B;AUZb,ACKa,AXQA,AEXb,ALGI,ACDI,AWLR,ANGA,ENGI,EaLJ,AFAA,ANEA,AOHY,GEMC,AXQA,CWRA,AXQA,CUbb,AZIa,GYJb,AbKI,CAAA,AYNJ,CXKQ,GaCK,AbDQ,CESR,AEXb,CQFA,CAAA,ACKyB,CXQiB,AEX1C,AJEQ,CaCK,CdAT,CAAA,CGQ0C,EUb9C,CAAA,AREA,ALGI,CGQ8C,AEXlD,ALGI,CGQ+C,EHR/C,CAAA,CAAA,GAAA,EGQsC,CAAuB,CHR7D,CGQsC,EAA2B,CEXrE,CFW0C,AEX1C,EFWyE,EAA/B,EAAmC,EAAnC,CAA7B;AWNA,AXOA,AQdb,AXKQ,ACAA,AFHA,ECGA,KcEK,AXOA,CWPA,AXOA,CFTA,AFHA,CAAL,ECGA,CGSK,AHTL,ADHS,CAAT,EIY6B,GWPxB,AHPb,AVKQ,CESiC,EWPI,AbFnB,CDAlB,CGSqC,AHTrC,CGSsC,CWPG,IAAI,CAAC,AdF9C,ACAA,CDAA,EGS6B,CAA4B,AHTzD,CAAA,CGS6B,AHT7B,ASHoB,ENYyC,CHT7D,CGS6B,CWPQ,CAAqB,AXOO,CMZ/B,CNYL,EAAwC,AHTrE,EGS6B,CAAxB,AMZuC;AIApD,ACME,AXOW,AQfb,ANGA,ALEe,AECX,ADAC,AWPL,AbIQ,AUEA,AHDG,CMLX,CESE,AdHa,EaHf,ARCA,GSKO,AXOM,CAAA,CWPJ,ATLT,ANAa,AOCF,COFX,AdCQ,AUEI,CGNA,CPIZ,ALEe,CaHf,AVaa,AHVE,ADFE,CAAT,CUES,CKGR,AXO4B,CWP5B,ETLT,CQDA,AVayC,AEZzC,AOJA,CCGA,CXIuB,AUPF,CZMN,CGU8B,AHV9B,CGU+B,GWRoB,CTJlE,CAAA,AHGI,AIFO,ENCI,AECyB,AOD5B,CTAG,ASAoB,AHDQ,CHWN,CAA4B,CHVlD,CaHf,AVaqC,AHVtB,CaHf,AbGe,ASAyB,CNU6B,AMV5B,CHDE,CHWN,AHVtB,AMD4B,EHW8B,EAApC,CMVF,CNU0C,CGXlC,CHWN,AHVtB,ASAoC,AHDA,CHWtC,GGXF,KGCwB,GAA4B,SAA5B,EAAvB,EACuB,IAAI,CAAC,SAAL,GAAiB,SAAjB,EADvB,CAAJ,EAEA;AKEN,AdJqB,AECiB,AUPhB,AbKnB,AUIO,AHHD,EQIT,AdJqB,AYNC,MEUhB,ALDI,CHHD,CQID,CFVc,CZMD,AYNC,AHSR,CTHO,ASGN,IKCP,CAAA,GFVc,CAAA,CZMD,CAAA,ASGX,AHHD,CGGkB,EHHQ,CMNb,ANMb,CMNa,CEQ0C,AdF3C,ASGX,CTHW,CYNC,CAAA,CZMD,AYNC,CZMD,CAAA,CYNC,EZMD,IYNC,EZMD;AaFvB,ACOE,AHRU,AXIX,AYP6B,AHUrB,CTLT,CcME,AFX4B,CZKlB,CaDZ,AREA,KMHY,EGQD,AFXmB,CAAA,CEWjB,AdNS,EWFV,CXEA,CcGsD,CHL7B,CAAC,EAAD,ACHP,CCI9B,ADJ8B,CDGW,AXE7B,CAAA,CaDZ,AFDqC,EAAO,ACHd,CAAA,CDGO,EAAU,ACHjB,CCI9B,ADJ8B,CCI9B,AFDqC,ACHP,CZKlB,CWFsC,CCHpB,CDGO,EAAgB,AXEzC,EWFyB,ACHP,EDG0B,EAAnB,CXEzB,CWF+C,AXE/C,EWFyB,EAAyB,EAAzB,EAA4B,EAA5B,AXEzB,CaDZ,CAAA,AFDoE,CXE9C,CWFe,CXEzB,CWF2D,AXEvE,EWFqC,EAAqC,EAArC,EAAwC,EAAxC,EAA2C,EAA3C,EAA8C,EAA9C,EAAiD,EAAjD,EAAoD,EAApD,EAAuD,EAAvD,EAA0D,EAA1D,EAA6D,EAA7D,EAAgE,EAAhE,EAAmE,EAAnE,EAAsE,EAAtE,EAAyE,EAAzE,EAA4E,EAA5E,EAA+E,EAA/E,EAAkF,EAAlF,EAAqF,EAArF,EAAwF,EAAxF,EAA2F,EAA3F,EAA8F,EAA9F,CAAzB;AGSV,AHMD,ANUG,AHnBI,AUT2B,AHc9B,AHNM,CMRX,CEYE,CFZU,MVSC,AIDF,GMRU,CEYR,EAAE,AFZH,CNQD,CDoBY,AHnBf,EIDa,CQA6C,AZC1C,EUTZ,CAAA,ELCI,AF2BZ,EAAoC,CHnBhC,CIDc,CCPO,CDOR,CMRT,CNQ+B,ECPH,EKD5B,OAAA,CAAA,SAAA,GAAS,EAAT,CAAZ;ACKA,ACQE,APXM,AF0BgC,ALfxC,AEHQ,AIAA,EQGN,EDRF,AbQY,IAAZ,CEHa,CIAF,COLX,CCQY,ARHC,CCRE,ADQD,COLd,ACQc,EZHN,CYF0D,APN/C,CAAC,CLQG,CIAZ,COLX,CAAA,CNHe,ALQY,CKRD,ANOX,CKCW,EJAK,CKRD,ALQE,CKRD,CNOJ,EKCD,CAAA,CJAH,CKRG,CLQlB,GWLR,CAAA,APK0B,CCRe,ANOM,AKCb,GCRU,EDQpC,CCRqC,CDSjC,ECT6B,GAAQ,ADSjC,CCTU,ADST,ICTmC,GAArC,CAAP,ODSI,GAAuB,EAAE,CAAC,OAA1B,CADJ,KAGI,KAAI,CAAC,qBAAL,GAA6B,EAAE,CAAC,OAAhC;AQCV,APXG,ALQA,ADDG,AKKH,EQDH,EFZF,CNMW,MLEE,KAAL,CaIS,EAAE,AbJE,IAAb,CFHO,GAAW,GAAS;AcDnC,ACEkE,ATCtD,ALIZ,ACFQ,AWkBJ,AbnBI,AOmCP,CQrC4C,AdK7C,CcLa,EDFb,KRGY,EQHZ,AbOY,ACFC,AFDA,CAAL,EcJR,CbOA,ADHiB,CAAT,CCGQ,AYgBA,ICvBhB,AZKQ,CYLR,EZK0B,CWkBtB,CPpBQ,COoBsB,EPpBM,GAA5B,CJEJ,EWkBJ,ECvBJ,ADuBoD,CCvBpD,AJU8B,GGa1B,CHbyC,CGaiB,GHbJ;AKC1D,ATLY,ALER,ACFC,AWiByD,AblBtD,AUOA,ETJJ,IAAA,CcGJ,AdHI,CcGJ,CTLY,ELER,ADHS,CCGT,ADHI,CUOO,ETJX,ADHa,AUOA,CTJb,ADHI,AUOU,CAAH,EKDf,ATLY,ALER,CcGQ,AdHR,ASIkB,CTJlB,CKFwC,AIMpB,CAAC,CTJrB,EcGJ,ATLgD,CSK7B,AHZJ,AXSX,CSIW,EKDf,CAAuB,ALCU,EAAE,CAAC,CAArB,IAA0B,CKDzC,CLC2C,CKDT,ALCU,CAAH,EJNO,CAAA,AIMA,EAAE,CAAC,CAAH,GKDd,ALCqB,CKDrB,CLCuB,CAAC,KKD1D,ALCe,EKDgC,ATLH,CAAsB,CIMC,EKDnE,ALCqE,CKDjB,ALCkB,CAAH,EJND,CAAA,AIMQ,CKD1E,CLC4E,CAAC,CJNX,CAAK,CAA3B,EAA8B,CAAC,AIMR,CJNvB,CAAhC,CIM0E,EAAE,CAAC,CAA1E,IAA+E,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,MAAvG;AEXA,ANMI,ALCL,ADFF,AUOA,ETLE,EaNP,EbMO,CAAA,EKDK,EMNC,AXON,CAAA,GWPU,AXOV,CAAA,EWPa,CXOb,CAAA,CWPgB,AXOhB,CWPC,EAAkB,AXOnB,GWPsB,ANMjB,ALCL,GWP0B,ANMmB,CEPjC,GFOqC,CMNvB,CAAA,WAAA,GAAc,GNMS,CAAA,CMNT,CAAA,SAAvC,EAAmD,GAAG,CNMV,CMN5C,ANMkE,EMLlE,KNKkE,CAAA,IAAA,CAAK,CAA3B,EAA8B,CAAC,CAA/B,CAAxC;AQMR,ACAE,APXE,AICI,ANiBA,ALXX,AYc6D,CZhB9D,EAAY,IAAI,EcMV,ATOM,CElBA,APKA,GOLG,AICE,CGUX,EPXY,COWZ,APXE,AICa,AXIT,CaMR,AROQ,ALbA,EWJY,CNiBgB,CLb5B,CWJe,ANiBf,CMjBA,EAAkB,CXIlB,AEGG,CAGV,CSV4B,GAAI,EXIzB,CAAA,EWJyB,CAAA,CXIzB,GAAI,EAAJ,CAAZ,KWJqC,GAAe,KAAA,CAAA,SAAxC,EAAoD,GAAG,EAAvD,EACA;AESR,ACCM,APXF,AIEQ,ANmBR,ESVE,OAAO,ATUJ,CSVK,APXN,GOWF,APXK,COWO,AHTF,EJFF,CFqBV,GAAgB,CErBN,CAAA,AIEU,GAAG,CGSrB,ETUF,CMnB2B,CVGjB,GMLA,ADQM,GCRQ,EIEG,CAAA,CLMG,CCRN,CAAA,IIED,ALMiB,CKNL,GAAG,CJFtC,EIEyC,KAAA,CAAA,SAAlB,EAA6B,GAAG,GAAG,KAAA,CAAA,SAAnC,CAAf;AGUR,APXA,AIEQ,ANqBR,AJnBqB,AWVjB,ANgBJ,MQCM,GTYD,AO7BD,CEiBM,APXN,ADUA,CCVC,EOWQ,AbPe,CMJpB,ADUA,CKRK,ACRT,EEiBa,ARDL,CCVA,AFuBZ,AJnBiC,AWVZ,CLMR,AFuBE,AO7BX,CP6BJ,CMrBQ,CAAY,ALQH,CQCA,AbPI,CaOJ,APXT,AFuBY,CEvBD,AIEX,EAAiB,CGSZ,ATYW,ANnBhB,CQJe,COWvB,APXwB,AIEhB,IAAwB,EJFb,EIEiB,IJFA,AFuBZ,CAAA,ACbZ,ECV2B,GAAG,ADUC,EKRP,CJFA,AIEA,GJFY,CAA7B,AFuBC,ACbuB,CDaN,ACbM,GCVU,CFuBZ,CMrBT,CJFxB,AIEuC,CLQJ,CAAQ,ECVS,ADUhD,GDa6B,CMrBT,ANqBS,ACbgB,CCVG,AIEpD,CJFoD,GDUE,EDazB,CAAY,GEvBjD,EFuBsD,KAAA,CAAA,OCbG,EDaR,GAAiB,ACbsB,IDalB,GCbkB,CAAA,CDalB,CAAA,KCbkB,CAAQ,GDa3D,CCb1B,CDasE,ECbuB,GDalB,ICbkB,CDalB,ACbkB,CDalB,GCbkB,CAAK,CAAlG,GAAsG,CDa5E,CAAjB,EAA8E,GCbe,CAAA,CDaV,GCbU,CAAK,CAAtH,KDaoB,EAA+F,IAA/F,CAApB;AQhBI,ACKL,APVC,AIAyD,ANyBzD,AJvByC,AWNtC,AbQH,AOKA,MCTA,GMKI,ANLD,AFyBE,AO7BF,CNaC,ECTE,CAAN,AKJG,AbQI,GaRc,EP6BrB,CQpBI,ARoBW,AChBF,CDgBb,EQpB0B,AdDV,AOKY,EDgBR,CO7BU,CAAC,CCS3B,AdDiB,AOKY,CDgBT,ANrBjB,CGKQ,CUbZ,CbQsB,IAAlB,GAAyB,EGKQ,EGgBhB,CAAA,ANrBa,CAA9B,GAAkC,COKb,EPL5B,GOK2D,EDgBvC,CAAiB,IAAI,AChBkB,CAAA,OAAA,CDgBlB,AChB0B,CDgB1B,GChBb,IDgBS,AChBsC,CDgB1B,IChB+B,CDgB1B,KAAA,CAAA,SAAL,GAAiB,EChBS,EDgBL,GChBoC,EDgBpC,CAAA,IChBoC,CAAA,IDgBrE,EAA4C,CChByB,CAAQ,EAAvF,CDgB2D,EChBkC,CAAC,CAA9F,CDgB2D,CAAA,CChBuC,CAA7H,ODgBqC,CAAjB,EAChB,IAAI,mBAAA,CAAA,iBAAJ,CAAsB,KAAK,UAAL,CAAgB,OAAhB,EAAtB,EAAiD,KAAK,UAAL,CAAgB,kBAAhB,EAAjD,CADgB,CAApB;AQhBF,ANRE,AF0BC,AHjBD,AUZI,AbOP,AOKG,IODF,ENRE,ADSA,GCTG,AF0BG,AO7BF,ECWC,AXCA,AIAA,CODC,ANRA,ADSA,GODR,CAAY,CNRJ,CAAA,AF0BL,AHjBD,CGiBgB,AHjBH,AUZT,CP6BH,EO7ByB,EP6BL,ACjBrB,CAAmB,CJAnB,CAAqB,AUZjB,CP6BqB,CCjBzB,CCTM,CDSmB,CJAzB,CKTqB,CMQvB,CXC+B,GKTR,CAAA,CDSrB,EDiByB,CAAA,CHjBzB,IKTA,OF0BqB,CAAiB,IAAI,SAAA,CAAA,OAAJ,CAAY,KAAK,KAAA,CAAA,SAAL,GAAiB,IAAI,KAAA,CAAA,SAAjC,EAA4C,KAAK,KAAA,CAAA,SAAjD,CAAjB,EAChB,IAAI,mBAAA,CAAA,iBAAJ,CAAsB,KAAK,UAAL,CAAgB,OAAhB,EAAtB,EAAiD,KAAK,UAAL,CAAgB,kBAAhB,EAAjD,CADgB,CAApB;AQhBH,ANTE,AIDQ,ATUX,AUXO,AHXZ,OAAA,CAAA,CIsBW,ADXC,CLEA,CAAC,GAAG,CMSV,AFVe,GEUD,ANTA,AKFR,CLES,EIDL,ACDiB,CCWT,AFVI,EJCZ,AEbhB,CFa2B,AIDX,CCDJ,CDCqB,AFZjC,EIsBwB,ANTO,CMSP,ANTQ,AIDhB,EAAsB,GEUlB,CAAU,ANTH,AIDX,GEUI,EAAe,CAAf,ANTwB,CEb5C,CIsBsC,CNTS,GMS3B,ANT8B,CMS5C,ENTsC,GAAY,CAA7B,IAAkC,GAA7C,IAAoD,KAAA,CAAA,SAA5D;AMWF,ANTE,AIFK,ANiCJ,ACvBD,SOCG,ARsBG,CCvBH,GCRI,EDQC,ECRG,CF+BV,CAAe,CAAf,EQtBH,ARsBqB,GQtBA,CNTR,CAAA,EMSY,ARsBtB,CAA0B,ACvBxB,ICRI,AF+BN,CE/BkB,ADQS,CCRrB,EAAe,CAAf,CAAP,CNDqB,CKSO,COCL,APDK,COCL,MPDK,CAAQ,KOCjB,APDnB,EOCF,APD4C;AOE5C,ANTD,AIFI,AVAoC,AWGjC,ANOA,QAAA,COCD,ADRC,IXHwC,AKUnC,CAAC,ILVuC,AWG7C,ENOA,CMPY,KCQlB,EZXuC,CYWd,IAAI,ADRN,kBCQM,CAAA,gBAAJ,EAAzB;AACA,AFXD,ANiCI,AJlC6D,AWK9D,ANMI,SOCD,ARsBG,CO7BF,GNMK,EOCX,ADPU,CAAC,ECOG,IAAI,GDPhB,CP6BC,CO7BmB,CNMhB,COCY,ARsBU,CQtBV,CRsBf,ACvB0B,CAAvB,GOCQ,EAAd;AAEA,ALhCN,AEAA,ALqDS,ADrDT,AQuB+B,ANOtB,IOEH,ALhCN,AEAA,ANAA,KCqDc,GQrBA,CAAC,ERqBN,CGrDT,AEAA,ANAA,CSgCM,CAAc,CLhCpB,AEAA,ANAA,OIAA,AEAA,ANAA,CIAA,AEAA,ANAA,ESgCM,CAA0B,KAAA,CAAA,WAAA,CAAY,CLhC5C,AEAA,ANAA,CIAA,AEAA,ANAA,ESgCM;ARsBG,AO/B8B,AbvBvC,AO+CK,OP/CL,CAAA,CMsDc,MAAL,ANtDT,GAAA,OAAA;AciCM,ALhCN,AEEA,ALoDS,ADpDT,AFCA,IMHA,AEEA,ANAA,GFCA,CAAA,CW6BW,AH9BX,ALoDc,ADpDd,GMAA,ANAA,CIFA,EKgCM,ARsBG,CQtBS,ALhClB,ENGA,CQDA,ANAA,CS8BM,AH9BN,ANAA,CFCA,EMHA,CAAA,GPoBe,ESlBf,ANAA,CMAA,ANAA,CFCA,YMHA,CAAA;AHuDS,AJjCD,AWCA,MAAA,GPgCM,EOhCF,CAAC,CXDG,GWCR,EXDa,CWCA,IXDL,CWCS,CAAC,CPgCjB,EJjCsB,CIiCG,AOhCb,IPgCZ,COhC0B,CXDJ,CAAA,IAAA,CAAK,CAApB,CWC4B,CAAC,EXDJ,EWCrB,GXD0B,AWEhC,SAAS,CXFkB,AWEjB,GADJ,EXDyC,CAAC,AWGhD,CXHC,GAAoD,IAApD,CWGQ,CAAC,CXHkD,GWClE,EXDA;AYaF,ANjCN,ACAA,AECA,ALqDK,ADrDL,AHoBK,IOrBL,AECA,ANAA,GGDA,CAAA,CMiCW,ELjCX,AECA,ANAA,GGDA,ACAA,AECA,ANAA,CSgCM,ENjCN,CMiCoB,IAAI,CNjCxB,GCAA,AECA,ANAA,CIDA,AECA,ANAA,ESgCwB,CAAA,ILjCxB,AECA,ANAA,CSgCoB,ALjCpB,AECA,ANAA,CSgC8B,IAAI,SAAA,CAAA,KLjClC,AECA,ANAA,CIDA,AECA,ANAA,CSgC8B,ALjC9B,AECA,ANAA,CSgC0C,GAAZ,EAAgB,GAAhB,CAAV,CAAd;AAEA,AFlCN,ACwBQ,MAAA,CDxBR,CAAA,CEkCW,EDVC,CAAC,CDxBb,CEkCM,EFlCN,CEkCmB,ADVX,CAAW,GCUI,AFlCvB,MEkCuB,CAAA,CDVf,GCUW,EAAb;AAEA,ALpCN,AJEA,IIFA,AEEA,ANAA,KSkCW,GLpCX,GAAA,EKoCM,KLpCN,CAAA,AJEA,GAAA,OAAA,CAAA,QIFA,CAAA,oBJEA,CAAA;ASmCK,ADZG,ANvBR,OAAA,CAAA,EMuBY,KAAI,CAAC,IAAL,ANvBZ,GAAA,CMuByB,KXHR,IWGiB,CAAC,CNvBnC,IMuBQ,EAAkC;AJxB1C,AJEA,AHqBQ,AWCoC,IJxB5C,AJEA,IQsB4C,CJxB5C,EJEA,CIFA,CPuBgB,AWCgC,CRtBhD,AQsBiD,IXD5B,AWCuB,CJxB5C,CAAA,CJEA,CAAA,CHqBgB,KAAe,COvB/B,CAAA,GHYwB,EJWO,CAAA,GIXK,ADVpC,CAAA,AHqB+B,CAAK,CAApB,IAAyB,IIXe,CJWV,UAAL,KAAoB,CAA9C,GAAmD,IAAnD,GAA0D,KAAjE;AIRA,AJSH,AWAoD,UPT5C,KAAK,UAAL,CAAgB,OAAhB,OAA8B,IAAnC,EACI;AOSP,IJtBL,AJCA,CQYY;APGJ,WAAK,kBAAL,CAAwB,EQmBZ,CRnBZ,CAA4B,KAAK,UAAL,CAAgB,OAAhB,EAA5B,EAAuD,KAAK,UAAL,CAAgB,kBAAhB,EAAvD;AQoBF,ADVE,SAAK,ICUA,IDVL,CCUU,EDVM,ICUX,CAAY,GDVjB,CXHS,KYaJ,EAAP;AACD,ARpBG,AJQA,AWEA,SAAK,EPVA,EJQG,CWER,GAAa,CXFA,GIRb,AOUA,CPVgB,CJQR,EIRR,CAAoB,EJQG,EIRvB,EAA0B,GJQH,CAAA,IAAA,CIRvB,AJQ4B,CAApB,IAAyB,KAAK,UAAL,KAAoB,CAAC,CAA/C,GAAoD,IAApD,GAA2D,KAAlE;AIPH,AJQA,AWIG,SAAK,IAAL,GAAa,QAAQ,IAAI,CAAb,GAAkB,SAAS,CAAC,QAA5B,GAAuC,SAAS,CAAC,KAA7D;AJ3BJ,AJwBA,AQIC,kBJ5BD,MJwBmB,QAAnB,EACmB,SADnB,EAE0C;AI1B1C,AJ0B0C,+BSU3B;AACb,aAAO,KAAK,MAAL,CAAY,IRWR,CJvBC,GYYL,EAAP;AACD,ALtCD,AHkDI,ADxBsC,AHCtC,MIuBA,EDxBe,KCwBR,AJvBC,CIuBA,ADxB8B,GCwBtC,CAAY,AJvBC,KAAL,KAAe,OAAA,CAAA,CIuBvB,GJvBuB,CAAK,CAApB,IAAyB,KAAK,UAAL,KAAoB,CAA9C,GAAmD,IAAnD,GAA0D,KAAjE,GGDiC,KAAK;AC2BtC,AJzBH,WIyBQ,cAAL,EKnDO,KECK;AJDZ,AEEA,ALoDA,AD9BsC,AQvBZ,QJDtB,EEEA,CLoDC,EOrD4B,EPqDjC,CGtDY,EIC0B,CJDd,EEET,EFFa,CEEV,IAAI,AEDI,IJDE,AEEF,CFFE,AEED,OFFH,AEEN,CFFkB,AEED,IAAI,CAAC,GFFJ,CAAA,GEED,CAAa,EFFZ,CAAO,CEER,CAAkB,EFFjB,CAAY,CAAZ,EAAe,GEEhB,EFFgB,AEEa,CFFb,UEEjC,CFFiC,AEEnD,GFFiE,KAAA,CAAA,SAA7B,CAAZ,EACY,QAAA,CAAA,MAAA,CAAO,IAAP,CAAY,CAAZ,EAAe,KAAA,CAAA,YAAA,GAAe,KAAA,CAAA,SAA9B,CADZ,CAAxB;AAEA,AEGA,ALkDH,AOtDsD,WFI9C,OAAL,GAAe,IAAI,GGiCX,CHjCe,CFHjB,AEGkB,IFHd,EEGK,CAAgB,MFHrB,CAAA,IEGK,CAAf,EFHM,CAAY,KAAG,KAAA,CAAA,SAAf,EAA0B,KAAG,KAAA,CAAA,SAA7B,CAAN;AKsCF,AHlCE,ANoBA,MScF,KHlCO,EGkCA,CAAC,GAAR,CAAY,CHlCV,CAAc,OAAO,CAAC,ENoBhB,GScR,AHlCE,KNoBA;AIvBA,AEMA,ANVI,UIIC,AJJD,CMUC,GFNL,IEMA,CAAa,CAAb,ANVI,GMUa,ANVmB,IAAI,CMUlB,QAAL,CAAc,CAA/B,QNVwC,CAAA,iBAAJ,CAAsB,OAAA,CAAA,IAAA,CAAK,CAA3B,EAA8B,CAAC,CAA/B,CAAhC;AS0CN,AH/BE,ANVI,UAAA,CSyCD,AH/BE,MG+BP,CAAY,AH/BV,CAAa,CAAb,GG+BF,AH/BmB,ILiDV,CKjDe,ANVlB,GAAwC,AQGjC,IRHqC,CMU/B,CAAc,CAA/B,gBNVgD,CAAA,iBAAJ,CAAsB,OAAA,CAAA,IAAA,CAAK,CAA3B,EAA8B,CAAC,CAA/B,CAAxC;AS0CP,AL5CD,AEeI,ALgDA,ADjCA,AHtCR,AWaiC,MFUzB,ALgDA,CJvER,CAAA,EGsCa,CMfL,CAAA,CLgDO,AO1DyB,CP0DxB,GAAR,ADjCA,CCiCY,AO1DyB,ERyBtB,GMff,CAAY,ANeO,CHtC3B,EWaiC,CRyBF,AHtC/B,CSuBQ,ANewB,CMfN,KNeH,CCiCf,CDjCA,CMfA,CAA2B,KAAK,CTvBxC,MSuBQ;AFTH,AEUA,ALiDG,ADlCA,AQ1BiD,UP4D7C,ADlCC,cAAL,GAAsB,ECkCC,EDlCG,CCkCS,GDlCL,CCkCS,ADlCR,MAAT,EAAtB,CCkCuC,CAAA,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAAnC;ADhCA,UAAK,QAAL,GAAgB,QAAhB;ACkCA,ADjCA,UAAK,CCiCA,IAAI,CAAC,CDjCV,ECiCa,CAAb,ADjCe,ECiCC,CAAC,GAAG,ADjCpB,ESYQ,GRqBiB,SAAL,CAAe,MAAnC,EAA2C,CAAC,EAA5C,EACA;AQpBF,ARqBM,ADlCJ,MSaF,ITbO,ECkCG,CQrBH,CAAC,GAAR,ATbE,CSaU,CRqBK,CDlCA,ECkCiB,GDlChC,ECkCqC,COvC7B,ICkBV,AH9BiB,ILmDiB,CAAe,CAAf,CKnDL,ALmDvB,CKhDP;ALiDO,ADlCJ,AQJA,URIK,CQJA,CPsCG,QDlCR,CQJA,ERIkB,CCkCE,AOtCF,GPsCc,COtChC,CJxBS,CAGZ,CH2DuC,CDlCpC,QCkCoC,CAAA,OAAJ,CAAY,OAAO,CAAC,QAAR,CAAiB,CAA7B,EAAgC,OAAO,CAAC,QAAR,CAAiB,CAAjD,CAA5B;AQrBN,ADhBE,WCgBG,ADhBE,MCgBP,ADhBE,CCgBU,EDhBK,GCgBjB,EDhBsB,IAAL,IAAa,SAAS,CAAC,QAAxB,GACR,MAAM,CAAC,WAAP,CAAmB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAnB,EAA8C,KAAK,QAAnD,CADQ,GAER,MAAM,CAAC,UAAP,CAAkB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAlB,EAA6C,KAAK,QAAlD,CAFN;ACiBH,ARsBO,ADlCJ,AQFH,UREQ,ECkCG,EDlCR,KCkCe,CAAC,MAAR,EAAJ,CKjDK,CAGZ,AL+CO;AAEI,UAAA,OAAO,CAAC,QAAR,CG9DD,AH8DkB,GAAjB,CAAqB,KAAK,QAAL,CAAc,CAAnC,EAAsC,KAAK,QAAL,CAAc,CAApD;AG5DR,AH6DQ,ADlD8B,UIXlC,AH6DI,OAAO,CAAC,GG7DD,GAAG,IAAI,EH6Dd,CAAqB,CG7DH,CAAC,GH6DO,IG7DhB,CAAiB,IAAI,CAAC,AH6DhC,OG7D2B,CAAa,IAAb,CAAkB,SAAlB,EAA6B,WAA9C,CAAlB;AAGA,AH2DQ,ADtCX,UCsCW,CG3DH,MH2DU,CG3Df,AH2DgB,GG3DD,IAAI,EIoBZ,ECcE,ALlCc,CAAC,AH2DhB,MG3DO,CAAgB,WAAhB,CAAf;AKoCF,ALnCE,AH2DK,AOvCL,EF5CwB,IG2D1B,GRkBM,EGrDC,AIoBA,ECeA,CAAC,AH3DkB,CAAA,ALqFpB,EQ1BN,CAAY,CLnCV,CAAc,CIoBd,GAAkB,GJpBG,CAAC,CIoBtB,ICeF,ALnCE;AAGA,AH2DQ,AOzCR,WJlBK,EIkBG,CPyCI,IG3DZ,AIkBa,CJlBA,CAAb,EIkBQ,CJlBS,EH2DM,COzCF,EJlBC,AH2DkB,KAAK,EOzCf,CJlBb,AIkBc,CJlBA,CAA/B,IH2DwC,CAAe,CAAC,AOzCjD,GPyCoD,AOxCrD,CPwCkC,CAAhC,IOxCI,CAAC,aAAP,CAAqB,KAAK,MAA1B,CADC,GAED,MAAM,CAAC,YAAP,CAAoB,KAAK,MAAzB,CAFN;ACeF,ALhCE,AE5BR,ALyFgB,AOzCX,OFhDL,CAAA,ELyFgB,CQ7BL,ALhCE,MKgCP,AR6BiB,CQ7BL,ALhCV,AE5BR,ALyFwB,CG7DH,CAAb,CE5BR,EF4ByB,CKgCnB,ILhCwB,EH6Dd,CKzFhB,ALyFqC,KG7DZ,CAAc,CAA/B,IH6DwC,CAAC,oBAAZ,EAArB;AQ5BX,AL9BG,AH6DQ,MG7DR,IH6DQ,CG7DR,CAAA,KH6De,CAAC,KG7DhB,CAAY,EH6DJ,CAAiB,EG7DzB,CAAkB,AH6DV,CAAqB,IDpFd,GIuBf,CAA2B,KAAK,MH6DgB,CG7DhD,AH6DiD,CAAzC,EAA4C,mBAAmB,CAAC,CAAhE;AG5DX,AH+DW,ADvF+B,UCuF/B,GDvFsC,ICuF/B,CAAC,ADvFmC,UAAZ,ECuF/B,CAAqB,WAArB;AACH,ADxF2D,4BQ0CxD;AAAK,WAAK,SAAL,GAAiB,IAAjB,OCaC,CAEjB;ARkCO,AOjDgC,QPiDhC,mBAAmB,GGjET,AHiEY,UGjEK,EHiE3B;AG/DJ,AHkEI,QAAA,GGlEC,IHkEM,CAAC,EGlEZ,CAAa,GHkET,KGlEJ,CAAsB,CAAtB,GAA0B,CJ3BV,OI2BkB,CAAC,CAAnC,EJ3B4C;AI4B5C,AHkEC,AD3FD,WIyBK,AJzBA,OIyBL,CAAa,QAAb,CAAsB,CAAtB,AJzBA,CAAwB,CSuDb,CL9Be,CJzB1B,CAA4B,KAAK,CIyBC,CAAC,CAAnC,OJzB4B,CAAgB,OAAhB,EAA5B,EAAuD,KAAK,UAAL,CAAgB,kBAAhB,EAAvD;ASuDW,AL7Bd,AHkEA,6BOpDY;ARrCT,AQqCc,WRrCT,AQqCc,SAAL,CRrCd,CAAgB,CQqCe,ERrC/B,CAAoB,EQqCN,ORrCe,CAAC,OAAV,EAApB,EAAyC,SAAS,CAAC,kBAAV,EAAzC;ASsDF,ATrDD,AQoCyC,MCiBxC,KAAA,CAAA,WAAA,CAAY,MAAZ;AAGA,MAAA,QAAQ,CAAC,eRkCG,CQlCZ,CAA0B,ALhCT,OKgCjB,ALhC6B,EKgCM,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","file":"app.a0488aa9.js","sourceRoot":"..\\src","sourcesContent":["export class Vector2\r\n{\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(x: number = 0, y: number = 0){\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public set(x: number, y: number)\r\n    {\r\n        //console.log(\"oldPos(\" + this.x + \", \" + this.y + \") <- newPos(\" + x + \", \" + y + \")\");\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public print()\r\n    {\r\n        return \"pos(\" + this.x + \", \" + this.y + \")\";\r\n    }\r\n}\r\n\r\n// // Garbage Struct type\r\n// export interface Vector2\r\n// {\r\n//     x: number;\r\n//     y: number;\r\n\r\n//     // public constructor(x: number, y: number){\r\n//     //     this.x = x;\r\n//     //     this.y = y;\r\n//     // }\r\n// }","export enum GameKey {\r\n    UP = 38,\r\n    DOWN = 40,\r\n    LEFT = 37,\r\n    RIGHT = 39,\r\n    SPACE = 32\r\n}\r\n\r\nexport enum ScreenEdge {\r\n    UP, RIGHT, BOTTOM, LEFT\r\n}\r\n\r\n// export enum Direction {\r\n//     UP, DOWN, LEFT, RIGHT, NONE\r\n// }\r\n\r\nexport enum Axis {\r\n    X, Y\r\n}\r\n","import { Axis } from \"./Enums\";\r\nimport { Direction } from \"readline\";\r\n\r\nexport class MovementDirection{\r\n    private _axis: Axis;\r\n    private _direction: Direction;\r\n\r\n    public constructor(axis: Axis, direction: Direction){\r\n        this._axis = axis;\r\n        this._direction = direction;\r\n    }\r\n\r\n    public set(axis: Axis, direction: Direction){\r\n        this._axis = axis;\r\n        this._direction = direction;\r\n    }\r\n\r\n    public getAxis(): Axis { return this._axis; }\r\n    public getDirectionNumber(): Direction { return this._direction; }\r\n\r\n    // Directional\r\n    public isUp(): boolean\r\n    {\r\n        return (this._axis === Axis.Y && this._direction === -1) ? true : false;\r\n    }\r\n\r\n    public isDown(): boolean\r\n    {\r\n        return (this._axis === Axis.Y && this._direction === 1) ? true : false;\r\n    }\r\n\r\n    public isLeft(): boolean\r\n    {\r\n        return (this._axis === Axis.X && this._direction === -1) ? true : false;\r\n    }\r\n\r\n    public isRight(): boolean\r\n    {\r\n        return (this._axis === Axis.X && this._direction === 1) ? true : false;\r\n    }\r\n}","import { Snake } from \"~ts/objects/Snake\";\r\nimport { IDrawable } from \"./IDrawable\";\r\nimport { Vector2 } from \"./Vector2\";\r\n\r\nexport abstract class GameObject implements IDrawable {\r\n    public position: Vector2;\r\n    \r\n    protected _sprite: PIXI.Sprite;\r\n    public getSprite(): PIXI.Sprite { return this._sprite; }\r\n\r\n    public constructor(position: Vector2)\r\n    {\r\n        this.position = position;\r\n        this._sprite = new PIXI.Sprite();\r\n    }\r\n\r\n    public abstract onCollision(snake: Snake): void;\r\n    public abstract update(position: Vector2): void;\r\n\r\n    public draw()\r\n    {\r\n\r\n    }\r\n\r\n    protected setFrame(rectangle: PIXI.Rectangle){\r\n        this._sprite.texture.frame = rectangle;  \r\n    }\r\n}","export const HEAD_UP: PIXI.Rectangle = new PIXI.Rectangle    (0, 0, 16, 16);\r\nexport const HEAD_RIGHT: PIXI.Rectangle = new PIXI.Rectangle(16, 0, 16, 16);\r\nexport const HEAD_DOWN: PIXI.Rectangle = new PIXI.Rectangle (32, 0, 16, 16);\r\nexport const HEAD_LEFT: PIXI.Rectangle = new PIXI.Rectangle (48, 0, 16, 16);\r\n\r\nexport const TAIL_UP: PIXI.Rectangle = new PIXI.Rectangle    (0, 16, 16, 16);\r\nexport const TAIL_RIGHT: PIXI.Rectangle = new PIXI.Rectangle(16, 16, 16, 16);\r\nexport const TAIL_DOWN: PIXI.Rectangle = new PIXI.Rectangle (32, 16, 16, 16);\r\nexport const TAIL_LEFT: PIXI.Rectangle = new PIXI.Rectangle (48, 16, 16, 16);\r\n\r\n\r\nexport const TURN_TOP_RIGHT: PIXI.Rectangle = new PIXI.Rectangle    (0, 32, 16, 16);\r\nexport const TURN_BOTTOM_LEFT: PIXI.Rectangle = new PIXI.Rectangle  (16, 32, 16, 16);\r\nexport const TURN_BOTTOM_RIGHT: PIXI.Rectangle = new PIXI.Rectangle (32, 32, 16, 16);\r\nexport const TURN_TOP_LEFT: PIXI.Rectangle = new PIXI.Rectangle     (48, 32, 16, 16);\r\n\r\nexport const Y_STRAIGHT: PIXI.Rectangle = new PIXI.Rectangle     (0, 48, 16, 16);\r\nexport const X_STRAIGHT: PIXI.Rectangle = new PIXI.Rectangle    (16, 48, 16, 16);\r\nexport const BUNNY: PIXI.Rectangle = new PIXI.Rectangle         (32, 48, 16, 16);\r\nexport const GRASS: PIXI.Rectangle = new PIXI.Rectangle         (48, 48, 16, 16);\r\n\r\n// export const TILESET: string = \"/Snake.b1339938.png\"\r\n// export const TEXTURE: PIXI.Texture = PIXI.Texture.from(TILESET);","import { GameObject } from \"~ts/types/GameObject\";\r\nimport { Snake } from \"./Snake\";\r\nimport { Vector2 } from \"~ts/types/Vector2\";\r\nimport { APPLICATION } from \"~ts/app\";\r\nimport * as TILESET from \"~ts/helper/Tileset\";\r\nimport { Rectangle } from \"pixi.js\";\r\nimport { MovementDirection } from \"~ts/types/MovementDirection\";\r\nimport { Axis } from \"~ts/types/Enums\";\r\n\r\nexport class SnakeSegment extends GameObject\r\n{\r\n    // Current and previous direction (x|y, -1|+1)\r\n    private _direction: MovementDirection = new MovementDirection(Axis.X, -1);\r\n    private _previousDirection: MovementDirection = new MovementDirection(Axis.X, -1)\r\n    public getDirection(): MovementDirection { return this._direction; }\r\n    public setDirection(direction: MovementDirection) \r\n    { \r\n        // Previous\r\n        this._previousDirection.set(this._direction.getAxis(), this._direction.getDirectionNumber());\r\n\r\n        // Current\r\n        this._direction.set(direction.getAxis(), direction.getDirectionNumber()); \r\n    }\r\n    public getPreviousDirection(): MovementDirection { return this._previousDirection; }\r\n    //public setPreviousDirection(direction: MovementDirection) { this._previousDirection.set(direction.getAxis(), direction.getDirectionNumber()); }\r\n    \r\n    // Previous sprite\r\n    public previousSprite: PIXI.Sprite;\r\n\r\n    // Type\r\n    private _isHead: boolean;\r\n    private _isTail: boolean;\r\n    public setTail(isTail: boolean) { this._isTail = isTail; }\r\n    public isHead(): boolean { return this._isHead; }\r\n\r\n    public constructor(position: Vector2,\r\n                       direction: MovementDirection, \r\n                       isHead: boolean = false)\r\n    {\r\n        super(position);\r\n\r\n        this._sprite = new PIXI.Sprite();\r\n        this.previousSprite = new PIXI.Sprite();\r\n\r\n        this.position = position;\r\n        this._isHead = isHead;\r\n        this._isTail = false;\r\n        this._direction = direction;\r\n\r\n        this.draw();\r\n    }\r\n\r\n    public onCollision(snake: Snake)\r\n    {\r\n        // TO DO: Lose the game\r\n    }\r\n\r\n    public update()\r\n    {\r\n        this._sprite.position.x = this.position.x;\r\n        this._sprite.position.y = this.position.y;\r\n    }\r\n\r\n    public draw()\r\n    { \r\n        let fullTileset = new PIXI.Texture(PIXI.Texture.from(\"tileset\").baseTexture);\r\n\r\n        // Create sprite\r\n        this._sprite = new PIXI.Sprite(fullTileset);\r\n        this.setFrame(TILESET.X_STRAIGHT);\r\n\r\n        // Set pos\r\n        this._sprite.x = this.position.x;\r\n        this._sprite.y = this.position.y;\r\n\r\n        // Add and render\r\n        APPLICATION.stage.addChild(this._sprite);\r\n    }\r\n\r\n    // Sprite setting\r\n    public setHeadFrame()\r\n    {\r\n        let frame: Rectangle = TILESET.HEAD_UP;\r\n\r\n        switch(this._direction.getAxis()){\r\n            case Axis.X:\r\n                frame = (this._direction.getDirectionNumber() == 1) ? TILESET.HEAD_RIGHT : TILESET.HEAD_LEFT;\r\n                break\r\n            case Axis.Y:\r\n                frame = (this._direction.getDirectionNumber() == 1) ? TILESET.HEAD_DOWN : TILESET.HEAD_UP;\r\n                break\r\n        }\r\n\r\n        this.setFrame(frame);\r\n    }\r\n\r\n    private setTailFrame(movementDirection: MovementDirection)\r\n    {\r\n       // console.log(\"Setting tail frame...\");\r\n        let frame: Rectangle = TILESET.HEAD_UP;\r\n\r\n        switch(movementDirection.getAxis()){\r\n            case Axis.X:\r\n               // console.log(\"Next segment on X axis...\");\r\n                frame = (movementDirection.getDirectionNumber() == 1) ? TILESET.TAIL_RIGHT : TILESET.TAIL_LEFT;\r\n                break\r\n            case Axis.Y:\r\n               // console.log(\"Next segment on Y axis...\");\r\n                frame = (movementDirection.getDirectionNumber() == 1) ? TILESET.TAIL_DOWN : TILESET.TAIL_UP;\r\n                break\r\n        }\r\n\r\n        this.setFrame(frame);\r\n    }\r\n\r\n    // Updates the sprite based on a set of rules\r\n    public updateSprite(nextSegment: SnakeSegment)\r\n    {\r\n        if(nextSegment.isHead())\r\n            this.setSpriteBasedOnHeadMovement(nextSegment);\r\n        else if(this._isTail)\r\n            this.setTailFrame(nextSegment.getPreviousDirection());\r\n        else\r\n            this.setSprite(nextSegment.previousSprite);\r\n    \r\n        this.updateStage();\r\n    }\r\n\r\n    // Sets this segment's sprite based on nextSegment's movement\r\n    private setSpriteBasedOnHeadMovement(nextSegment: SnakeSegment)\r\n    {\r\n        // STRAIGHT\r\n        if(this._previousDirection.getAxis() === nextSegment.getDirection().getAxis())\r\n        {\r\n            if(this._previousDirection.getAxis() === Axis.X)\r\n                this.newSprite(TILESET.X_STRAIGHT);\r\n            else\r\n                this.newSprite(TILESET.Y_STRAIGHT);           \r\n        }\r\n\r\n        // LEFT\r\n        if(this._previousDirection.isLeft())\r\n        {\r\n            if(nextSegment.getDirection().isUp())\r\n                this.newSprite(TILESET.TURN_TOP_RIGHT);\r\n            else if(nextSegment.getDirection().isDown())\r\n                this.newSprite(TILESET.TURN_BOTTOM_LEFT);\r\n        }\r\n\r\n        // RIGHT\r\n        if(this._previousDirection.isRight())\r\n        {\r\n            if(nextSegment.getDirection().isUp())\r\n                this.newSprite(TILESET.TURN_TOP_LEFT);\r\n            else if(nextSegment.getDirection().isDown())\r\n                this.newSprite(TILESET.TURN_BOTTOM_RIGHT);\r\n        }\r\n\r\n        // UP\r\n        else if(this._previousDirection.isUp())\r\n        {\r\n            if(nextSegment.getDirection().isLeft())\r\n                this.newSprite(TILESET.TURN_BOTTOM_RIGHT);\r\n            else if(nextSegment.getDirection().isRight())\r\n                this.newSprite(TILESET.TURN_BOTTOM_LEFT);\r\n        }\r\n\r\n        // DOWN\r\n        else if(this._previousDirection.isDown())\r\n        {\r\n            if(nextSegment.getDirection().isLeft())\r\n               this.newSprite(TILESET.TURN_TOP_LEFT); \r\n            else if(nextSegment.getDirection().isRight())\r\n                this.newSprite(TILESET.TURN_TOP_RIGHT);   \r\n       }\r\n    }\r\n\r\n    // Creates a new sprite for given frame\r\n    private newSprite(frame: PIXI.Rectangle)\r\n    {\r\n        // Set previous for next in chain to copy\r\n        this.previousSprite = this._sprite;\r\n\r\n        // New sprite\r\n        this._sprite = new PIXI.Sprite(new PIXI.Texture(PIXI.Texture.from(\"tileset\").baseTexture));\r\n        this.setFrame(frame);\r\n    }\r\n\r\n    // Updates the sprite\r\n    private setSprite(sprite: PIXI.Sprite){\r\n        this.previousSprite = this._sprite;\r\n        this._sprite = sprite;\r\n    }\r\n\r\n    private updateStage()\r\n    {\r\n        APPLICATION.stage.addChild(this._sprite);\r\n        APPLICATION.stage.removeChild(this.previousSprite);\r\n    }\r\n}","import * as PIXI from 'pixi.js';\r\nimport { IPlayerObject } from '../types/IPlayerObject';\r\nimport { Vector2 } from '../types/Vector2';\r\nimport { Axis } from '../types/Enums';\r\nimport { MovementDirection } from '../types/MovementDirection';\r\nimport { Direction } from 'readline';\r\nimport { SnakeSegment } from './SnakeSegment';\r\nimport { TILE_SIZE, APPLICATION } from '~ts/app';\r\n\r\nexport class Snake implements IPlayerObject\r\n{\r\n    public position: Vector2;\r\n    private _movementModifier: number = .16;\r\n\r\n    // Direction\r\n    private _direction: MovementDirection = new MovementDirection(Axis.X, -1);\r\n    private _previousDirection: MovementDirection = new MovementDirection(Axis.X, -1);\r\n    public setDirection(axis: Axis, direction: Direction) \r\n    { \r\n        // Can't switch direction on the same axis (i.e. from up to down or up to up)\r\n        if  (this._direction.getAxis() === axis)\r\n            return;\r\n\r\n        \r\n        this._previousDirection.set(this._direction.getAxis(), this._direction.getDirectionNumber());\r\n        this._direction.set(axis, direction);\r\n    }\r\n\r\n    // Snake part related\r\n    private _segments: SnakeSegment[] = [];\r\n\r\n    public constructor(position: Vector2)\r\n    {\r\n        this.position = position;\r\n        //this.draw();\r\n\r\n        this._segments[0] = new SnakeSegment(new Vector2(17 * TILE_SIZE - 1 * TILE_SIZE, 16 * TILE_SIZE), this._direction, true);\r\n        //this._segments[0].setDirection(this._direction);\r\n        // //this._segments[0].setPreviousDirection(this._previousDirection);\r\n\r\n        this._segments[1] = new SnakeSegment(new Vector2(17 * TILE_SIZE + 0 * TILE_SIZE, 16 * TILE_SIZE), \r\n            new MovementDirection(this._direction.getAxis(), this._direction.getDirectionNumber()));\r\n         this._segments[2] = new SnakeSegment(new Vector2(17 * TILE_SIZE + 1 * TILE_SIZE, 16 * TILE_SIZE), \r\n             new MovementDirection(this._direction.getAxis(), this._direction.getDirectionNumber()));\r\n        //     this._segments[3] = new SnakeSegment(new Vector2(17 * TILE_SIZE + 4 * TILE_SIZE, 16 * TILE_SIZE), \r\n        //     new MovementDirection(this._direction.getAxis(), this._direction.getDirectionNumber()));\r\n        //     this._segments[4] = new SnakeSegment(new Vector2(17 * TILE_SIZE + 5 * TILE_SIZE, 16 * TILE_SIZE), \r\n        //     new MovementDirection(this._direction.getAxis(), this._direction.getDirectionNumber()));\r\n        //     this._segments[5] = new SnakeSegment(new Vector2(17 * TILE_SIZE + 6 * TILE_SIZE, 16 * TILE_SIZE), \r\n        //     new MovementDirection(this._direction.getAxis(), this._direction.getDirectionNumber()));\r\n         this._segments[2].setTail(true);\r\n\r\n         this._movementModifier = 16;\r\n         this.update();\r\n         this.update();\r\n         this.update();\r\n         this._movementModifier = 0.16;\r\n    }\r\n\r\n    public update(): void\r\n    {\r\n        console.log(\"Updating snake...\");\r\n\r\n        // Apply direction to the position\r\n        this.applyDirection();\r\n\r\n        // Draw the snake\r\n        this.draw();\r\n    }\r\n\r\n\r\n    // Draw the snake\r\n    public draw()\r\n    {\r\n        console.log(\"Drawing snake...\");\r\n\r\n        let nextSegmentPosition: Vector2 = new Vector2(0, 0);\r\n\r\n        for (let i = 0; i < this._segments.length; i++) \r\n        {\r\n            let segment: SnakeSegment = this._segments[i];\r\n            let tempPosition: Vector2 = new Vector2(segment.position.x, segment.position.y);\r\n\r\n            if (segment.isHead()) \r\n            {\r\n                // Head segment\r\n                segment.position.set(this.position.x, this.position.y);\r\n                segment.setDirection(this._direction);\r\n                segment.setHeadFrame();\r\n            }\r\n            else\r\n            {\r\n                let nextSegment: SnakeSegment = this._segments[i - 1];\r\n\r\n                // Set the new direction\r\n                segment.setDirection(nextSegment.getPreviousDirection());\r\n                \r\n                // Set new position\r\n                segment.position.set(nextSegmentPosition.x, nextSegmentPosition.y);          \r\n\r\n                // Update the sprite\r\n                segment.updateSprite(nextSegment);\r\n            }\r\n\r\n            // Used by by the next iteration\r\n            nextSegmentPosition = tempPosition;\r\n\r\n            // Updates the segment (position)\r\n            segment.update();\r\n        }\r\n    }\r\n\r\n    public levelUp()\r\n    {\r\n        // TO DO: Update score\r\n        this.increaseLength();\r\n        //this.draw();\r\n    }\r\n\r\n    private increaseLength(){\r\n        let lastSegment = this._segments[this._segments.length - 1];\r\n\r\n        // Making copies, not references\r\n        let direction = new MovementDirection(lastSegment.getDirection().getAxis(), lastSegment.getDirection().getDirectionNumber());\r\n        let position = new Vector2(lastSegment.position.x, lastSegment.position.y);\r\n\r\n        // Setting the initial position based on the direction\r\n        if(direction.isLeft())  \r\n            position.set(position.x + TILE_SIZE, position.y);\r\n        else if(direction.isRight())\r\n            position.set(position.x - TILE_SIZE, position.y);\r\n        else if(direction.isUp())\r\n            position.set(position.x, position.y - TILE_SIZE);\r\n        else if(direction.isDown())\r\n            position.set(position.x, position.y + TILE_SIZE);\r\n\r\n        // Create new segment\r\n        let newSegment = new SnakeSegment(position, direction, false);\r\n\r\n        // Update tail status\r\n        newSegment.setTail(true);\r\n        lastSegment.setTail(false);\r\n\r\n        // Update the sprites accordingly to their next segment in chain\r\n        lastSegment.updateSprite(this._segments[this._segments.length - 2]);\r\n        newSegment.updateSprite(lastSegment);\r\n\r\n        this.update();\r\n        APPLICATION.render();\r\n\r\n        // Add to the chain\r\n        this._segments[this._segments.length] = newSegment;\r\n    }\r\n   \r\n    private applyDirection()\r\n    {\r\n        if(this._direction.getAxis() == Axis.X)\r\n        {\r\n            this.position.x += this._direction.getDirectionNumber() * this._movementModifier;\r\n        }\r\n\r\n        if(this._direction.getAxis() == Axis.Y)\r\n        {\r\n            this.position.y += this._direction.getDirectionNumber() * this._movementModifier;\r\n        }\r\n    }\r\n\r\n    private isLastSegment(i: number): boolean\r\n    {\r\n        return (i === this._segments.length - 1) ? true : false;\r\n    }\r\n\r\n    public getHead(): SnakeSegment\r\n    {   \r\n        return this._segments[0];\r\n    }\r\n}\r\n\r\n\r\n        \r\n        ","import {GameKey, Axis} from \"../types/Enums\"\r\nimport { Snake } from \"~ts/objects/Snake\";\r\nimport { Direction } from \"readline\";\r\nimport { Timer } from \"~ts/types/Timer\";\r\nimport { Game } from \"~ts/Game\";\r\n\r\nexport class InputHandler\r\n{\r\n    public lastControlKeyPressed: number = GameKey.LEFT;\r\n    public spaceKeyPressed: number = 0;\r\n\r\n    public onKeyUp = (ev: KeyboardEvent) => \r\n    {\r\n        if(ev.keyCode === GameKey.SPACE)\r\n            this.spaceKeyPressed = ev.keyCode;\r\n        else\r\n            this.lastControlKeyPressed = ev.keyCode;\r\n        \r\n    }\r\n\r\n    public processInput(snake: Snake, game: Game)\r\n    {\r\n        // Set the snake's direction\r\n        let axis = (this.lastControlKeyPressed === GameKey.UP || this.lastControlKeyPressed === GameKey.DOWN) ? Axis.Y : Axis.X;\r\n        let direction: Direction = (this.lastControlKeyPressed === GameKey.LEFT || this.lastControlKeyPressed === GameKey.UP) ? -1 : 1;\r\n        snake.setDirection(axis, direction);\r\n\r\n        if(this.spaceKeyPressed === GameKey.SPACE){\r\n            snake.update();\r\n            this.spaceKeyPressed = 0;\r\n        }\r\n\r\n        // Pause\r\n        // if(this.spaceKeyPressed === GameKey.SPACE){\r\n        //     if (!game.isRunning())\r\n        //         game.start();\r\n        //     else\r\n        //     {\r\n        //         if (game.isPaused())\r\n        //             game.resume();\r\n        //         else\r\n        //             game.pause();\r\n        //     }\r\n            \r\n                \r\n        //     this.spaceKeyPressed = 0;\r\n        // }\r\n    }\r\n}\r\n\r\n        // switch(this.lastKey){\r\n        //     case GameKey.UP:\r\n        //         snake.setDirection(Axis.Y, -1);\r\n        //         break\r\n        //     case GameKey.DOWN:\r\n        //         snake.setDirection(Axis.Y, 1);\r\n        //         break\r\n        //     case GameKey.LEFT:\r\n        //         snake.setDirection(Axis.X, -1);\r\n        //         break\r\n        //     case GameKey.RIGHT:\r\n        //         snake.setDirection(Axis.X, 1);\r\n        //         break\r\n        // }","import { TILE_SIZE, ARENA_WIDTH, ARENA_HEIGHT } from \"~ts/app\";\r\nimport { Vector2 } from \"~ts/types/Vector2\";\r\n\r\nexport class Random{\r\n    static next(min: number, max: number){\r\n        return Math.floor(Math.random()*(max-min+1)+min);\r\n    }\r\n\r\n    // Get the top-left pos of a random tile\r\n    static nextTile() : Vector2\r\n    {\r\n        let min = 0;\r\n        let max = ARENA_WIDTH / TILE_SIZE;\r\n        let x = Math.floor(Math.random() * (max - min + 1) + min) * TILE_SIZE;\r\n\r\n        min = 0;\r\n        max = ARENA_HEIGHT / TILE_SIZE;\r\n        let y = Math.floor(Math.random() * (max - min + 1) + min) * TILE_SIZE;\r\n\r\n        return new Vector2(x, y);\r\n    }\r\n\r\n}","import { GameObject } from \"~ts/types/GameObject\";\r\nimport { Vector2 } from \"~ts/types/Vector2\";\r\nimport { SnakeSegment } from \"./SnakeSegment\";\r\nimport * as TILESET from \"~ts/helper/Tileset\";\r\nimport { Random } from \"~ts/helper/Random\";\r\nimport { ARENA_WIDTH, ARENA_HEIGHT, APPLICATION, TILE_SIZE } from \"~ts/app\";\r\nimport { Snake } from \"./Snake\";\r\n\r\nexport class Food extends GameObject\r\n{\r\n    // Current & Previous sprite\r\n    public constructor()\r\n    {\r\n        let position: Vector2 = new Vector2(Random.next(0, ARENA_WIDTH - TILE_SIZE), \r\n                                            Random.next(0, ARENA_HEIGHT - TILE_SIZE));\r\n        super(new Vector2(10*TILE_SIZE, 16*TILE_SIZE));\r\n        this.draw();\r\n    }\r\n\r\n    public update()\r\n    {\r\n        \r\n    }\r\n\r\n    public draw()\r\n    {\r\n        let fullTileset = new PIXI.Texture(PIXI.Texture.from(\"tileset\").baseTexture);\r\n\r\n        // Create sprite\r\n        this._sprite = new PIXI.Sprite(fullTileset);\r\n        this.setFrame(TILESET.BUNNY);\r\n\r\n        // Set pos\r\n        this._sprite.x = this.position.x;\r\n        this._sprite.y = this.position.y;\r\n\r\n        // Add and render\r\n        APPLICATION.stage.addChild(this._sprite);\r\n    }\r\n\r\n    private respawnAt(position: Vector2)\r\n    {\r\n        this._sprite.position.x = position.x;\r\n        this._sprite.position.y = position.y;\r\n    }\r\n\r\n    public onCollision(snake: Snake)\r\n    {\r\n        snake.levelUp();\r\n        this.respawnAt(Random.nextTile());\r\n    }\r\n}","import { Snake } from \"~ts/objects/Snake\";\r\nimport { Food } from \"~ts/objects/Food\";\r\nimport { Rectangle } from \"pixi.js\";\r\n\r\nexport class CollisionHandler\r\n{\r\n    public handleCollisions(snake: Snake, food: Food)\r\n    {\r\n        // Food\r\n        if (this.collisionDetected(snake.getHead().getSprite().getBounds(), \r\n                                   food.getSprite().getBounds()))\r\n        {\r\n            food.onCollision(snake);\r\n        }\r\n\r\n        // Body\r\n        \r\n    }\r\n\r\n    private collisionDetected(ab: Rectangle, bb: Rectangle)\r\n    {\r\n        return ab.x + ab.width > bb.x && ab.x < bb.x + bb.width && ab.y + ab.height > bb.y && ab.y < bb.y + bb.height;\r\n    }\r\n}","import { GameObject } from \"~ts/types/GameObject\";\r\nimport { Snake } from \"./Snake\";\r\nimport { Vector2 } from \"~ts/types/Vector2\";\r\nimport { APPLICATION } from \"~ts/app\";\r\nimport * as TILESET from \"~ts/helper/Tileset\";\r\n\r\nexport class GroundTile extends GameObject\r\n{\r\n\r\n    // public constructor(position: Vector2){\r\n    //     super(position);\r\n    // }\r\n\r\n    public draw()\r\n    {\r\n        let fullTileset = new PIXI.Texture(PIXI.Texture.from(\"tileset\").baseTexture);\r\n        \r\n        // Create sprite\r\n        this._sprite = new PIXI.Sprite(fullTileset);\r\n        this.setFrame(TILESET.GRASS);\r\n\r\n        // Set pos\r\n        this._sprite.x = this.position.x;\r\n        this._sprite.y = this.position.y;\r\n\r\n        // Add and render\r\n        APPLICATION.stage.addChild(this._sprite);\r\n    }\r\n\r\n    public onCollision(snake: Snake)\r\n    {\r\n\r\n    }\r\n\r\n    public update()\r\n    {\r\n\r\n    }\r\n}","import { GroundTile } from \"./GroundTile\";\r\nimport { Vector2 } from \"~ts/types/Vector2\";\r\nimport { TILE_SIZE, ARENA_WIDTH, ARENA_HEIGHT } from \"~ts/app\";\r\n\r\nexport class Arena\r\n{\r\n    private _tiles: GroundTile[][] = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]];\r\n\r\n    public draw()\r\n    {\r\n        for (let row = 0; row < (ARENA_WIDTH / TILE_SIZE); row++) \r\n        {\r\n            for (let col = 0; col < (ARENA_HEIGHT / TILE_SIZE); col++) \r\n            {\r\n                let position = new Vector2(row * TILE_SIZE, col * TILE_SIZE);\r\n                this._tiles[row][col] = new GroundTile(position);; \r\n                this._tiles[row][col].draw();\r\n            }\r\n        }\r\n    }\r\n\r\n}","import { Game } from \"~ts/Game\";\r\n\r\nexport enum ClockType { TIMED, INFINITE }\r\nexport enum ClockTick { EVEN, ODD }\r\n\r\nexport class Timer {\r\n\r\n    private handle: number = 0;\r\n    private interval: number;\r\n\r\n    public type: ClockType;\r\n    public tick: ClockTick = ClockTick.EVEN;\r\n\r\n    private _isRunning: boolean = false;\r\n    public isRunning(): boolean { return this._isRunning; }\r\n    private _isPaused: boolean = false;\r\n    public isPaused(): boolean { return this._isPaused; }\r\n\r\n    //private handler: () => any = () => { console.log(\"No clock event\") }\r\n    private _game: Game;\r\n\r\n    private onElapsed = () => {\r\n\r\n        if (this._isPaused) {  return }\r\n        this.tick = (this.tick === ClockTick.EVEN)\r\n            ? ClockTick.ODD\r\n            : ClockTick.EVEN\r\n\r\n        this._game.onClockTick();\r\n        if (this.type == ClockType.TIMED) { this.stop() }\r\n    }\r\n\r\n    constructor(interval: number, duration: number, game: Game) {\r\n\r\n        this.interval = interval;\r\n        this._game = game;\r\n\r\n        // If duration passed it's a timed ClockType\r\n        this.type = (duration == 0) ? ClockType.INFINITE : ClockType.TIMED;\r\n    }\r\n\r\n    public start() {\r\n\r\n        this._isRunning = true\r\n        this.handle = (this.type == ClockType.INFINITE)\r\n            ? window.setInterval(this.onElapsed.bind(this), this.interval)\r\n            : window.setTimeout(this.onElapsed.bind(this), this.interval)\r\n    }\r\n\r\n    public stop() {\r\n        this._isRunning = false\r\n        return (this.type == ClockType.INFINITE)\r\n            ? window.clearInterval(this.handle)\r\n            : window.clearTimeout(this.handle)\r\n    }\r\n\r\n    public pause() { this._isPaused = true }\r\n\r\n    public resume() { this._isPaused = false }                \r\n}","import * as PIXI from 'pixi.js';\r\nimport { Snake } from './objects/Snake';\r\nimport { Vector2 } from './types/Vector2';\r\nimport { InputHandler } from './user/InputHandler';\r\nimport { APPLICATION } from './app';\r\nimport tileSetPath from '../resources/images/Snake.png';\r\nimport { Food } from './objects/Food';\r\nimport { CollisionHandler } from './user/CollisionHandler';\r\nimport { Arena } from './objects/Arena';\r\nimport { Timer } from './types/Timer';\r\n\r\nexport class Game\r\n{\r\n    private _snake: Snake;\r\n    private _inputHandler: InputHandler;\r\n    private _food: Food;\r\n    private _collisionHandler: CollisionHandler;\r\n    private _arena: Arena;\r\n    private _timer: Timer;\r\n\r\n    private _isRunning: boolean = false;\r\n\r\n    public constructor()\r\n    {\r\n      console.log(\"Creating game...\");\r\n\r\n      this._timer = new Timer(150, 0, this);\r\n      // this._timer.pause();\r\n      this._inputHandler = new InputHandler();\r\n      this._collisionHandler = new CollisionHandler(); \r\n      this._arena = new Arena();\r\n\r\n      document.body.appendChild(APPLICATION.view);\r\n      this._arena.draw();\r\n\r\n      // GameObjects\r\n      this._snake = new Snake(new Vector2(256,256));\r\n      //this._snake.update();\r\n      this._food = new Food();\r\n\r\n      this.gameLoop();\r\n    }\r\n\r\n    public isRunning(){\r\n      return this._timer.isRunning();\r\n    }\r\n\r\n    public isPaused(){\r\n      return this._timer.isPaused();\r\n    }\r\n\r\n    public start()\r\n    {\r\n      console.log(\"starting game\");\r\n      this._timer.start();\r\n    }\r\n\r\n    public pause()\r\n    {\r\n      console.log(\"pausing game\");\r\n      this._timer.pause();\r\n    }\r\n\r\n    public resume()\r\n    {\r\n      console.log(\"resuming game\");\r\n      this._timer.resume();\r\n    }\r\n\r\n    public onClockTick()\r\n    {\r\n    }\r\n\r\n    public gameLoop()\r\n    {\r\n      APPLICATION.render();\r\n\r\n      // Handle input\r\n      document.addEventListener('keyup', this._inputHandler.onKeyUp);\r\n      this._inputHandler.processInput(this._snake, this);\r\n\r\n      this._collisionHandler.handleCollisions(this._snake, this._food);\r\n      this._snake.update();\r\n\r\n      // Loop\r\n      requestAnimationFrame(() => this.gameLoop());\r\n    }\r\n}\r\n\r\n// let img : HTMLImageElement = document.getElementById('tileset') as HTMLImageElement;\r\n// \r\n// console.log(\"---stage children---\");\r\n// console.log(this._app.stage.children);","//import PatternTester from \"./design_pattern_examples/0_test/PatternTester\"\r\nimport { Game } from './Game';\r\nimport tileSetPath from '../resources/images/Snake.png';\r\n\r\n// Perform tests\r\n//new PatternTester().testAll();\r\n\r\nexport const ARENA_WIDTH = 512;\r\nexport const ARENA_HEIGHT = 512;\r\nexport const TILE_SIZE = 16;\r\n\r\nexport const APPLICATION: PIXI.Application = new PIXI.Application({ \r\n  width: ARENA_WIDTH,         // default: 800\r\n  height: ARENA_HEIGHT,        // default: 600\r\n  antialias: true,    // default: false\r\n  transparent: false, // default: false\r\n  resolution: 1.5,       // default: 1\r\n  backgroundColor: 0x1099bb\r\n});\r\n\r\nAPPLICATION.loader.add(\"tileset\", tileSetPath).load(setup);\r\n\r\n      function setup() {\r\n          console.log(\"setup done\");\r\n        const game = new Game();\r\n      }\r\n\r\n\r\n\r\n"]}