{"id":"../node_modules/class-transformer/decorators.js","dependencies":[{"name":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\decorators.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\package.json","includedInParent":true,"mtime":1591902486937},{"name":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\package.json","includedInParent":true,"mtime":1591900633309},{"name":"./ClassTransformer","loc":{"line":3,"column":33},"parent":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\decorators.js","resolved":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\ClassTransformer.js"},{"name":"./storage","loc":{"line":4,"column":24},"parent":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\decorators.js","resolved":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\storage.js"},{"name":"./metadata/TypeMetadata","loc":{"line":5,"column":29},"parent":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\decorators.js","resolved":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\metadata\\TypeMetadata.js"},{"name":"./metadata/ExposeMetadata","loc":{"line":6,"column":31},"parent":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\decorators.js","resolved":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\metadata\\ExposeMetadata.js"},{"name":"./metadata/ExcludeMetadata","loc":{"line":7,"column":32},"parent":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\decorators.js","resolved":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\metadata\\ExcludeMetadata.js"},{"name":"./metadata/TransformMetadata","loc":{"line":8,"column":34},"parent":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\decorators.js","resolved":"C:\\Users\\user\\Downloads\\wetransfer-ebf2ca\\Opdracht DGS\\empty_typescript_project\\testInputs\\node_modules\\class-transformer\\metadata\\TransformMetadata.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ClassTransformer_1 = require(\"./ClassTransformer\");\nvar storage_1 = require(\"./storage\");\nvar TypeMetadata_1 = require(\"./metadata/TypeMetadata\");\nvar ExposeMetadata_1 = require(\"./metadata/ExposeMetadata\");\nvar ExcludeMetadata_1 = require(\"./metadata/ExcludeMetadata\");\nvar TransformMetadata_1 = require(\"./metadata/TransformMetadata\");\n/**\n * Defines a custom logic for value transformation.\n */\nfunction Transform(transformFn, options) {\n    return function (target, key) {\n        var metadata = new TransformMetadata_1.TransformMetadata(target.constructor, key, transformFn, options);\n        storage_1.defaultMetadataStorage.addTransformMetadata(metadata);\n    };\n}\nexports.Transform = Transform;\n/**\n * Specifies a type of the property.\n */\nfunction Type(typeFunction) {\n    return function (target, key) {\n        var type = Reflect.getMetadata(\"design:type\", target, key);\n        var metadata = new TypeMetadata_1.TypeMetadata(target.constructor, key, type, typeFunction);\n        storage_1.defaultMetadataStorage.addTypeMetadata(metadata);\n    };\n}\nexports.Type = Type;\n/**\n * Marks property as included in the process of transformation. By default it includes the property for both\n * constructorToPlain and plainToConstructor transformations, however you can specify on which of transformation types\n * you want to skip this property.\n */\nfunction Expose(options) {\n    return function (object, propertyName) {\n        var metadata = new ExposeMetadata_1.ExposeMetadata(object instanceof Function ? object : object.constructor, propertyName, options || {});\n        storage_1.defaultMetadataStorage.addExposeMetadata(metadata);\n    };\n}\nexports.Expose = Expose;\n/**\n * Marks property as excluded from the process of transformation. By default it excludes the property for both\n * constructorToPlain and plainToConstructor transformations, however you can specify on which of transformation types\n * you want to skip this property.\n */\nfunction Exclude(options) {\n    return function (object, propertyName) {\n        var metadata = new ExcludeMetadata_1.ExcludeMetadata(object instanceof Function ? object : object.constructor, propertyName, options || {});\n        storage_1.defaultMetadataStorage.addExcludeMetadata(metadata);\n    };\n}\nexports.Exclude = Exclude;\n/**\n * Transform the object from class to plain object and return only with the exposed properties.\n */\nfunction TransformClassToPlain(params) {\n    return function (target, propertyKey, descriptor) {\n        var classTransformer = new ClassTransformer_1.ClassTransformer();\n        var originalMethod = descriptor.value;\n        descriptor.value = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var result = originalMethod.apply(this, args);\n            var isPromise = !!result && (typeof result === \"object\" || typeof result === \"function\") && typeof result.then === \"function\";\n            return isPromise ? result.then(function (data) { return classTransformer.classToPlain(data, params); }) : classTransformer.classToPlain(result, params);\n        };\n    };\n}\nexports.TransformClassToPlain = TransformClassToPlain;\n/**\n * Return the class instance only with the exposed properties.\n */\nfunction TransformClassToClass(params) {\n    return function (target, propertyKey, descriptor) {\n        var classTransformer = new ClassTransformer_1.ClassTransformer();\n        var originalMethod = descriptor.value;\n        descriptor.value = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var result = originalMethod.apply(this, args);\n            var isPromise = !!result && (typeof result === \"object\" || typeof result === \"function\") && typeof result.then === \"function\";\n            return isPromise ? result.then(function (data) { return classTransformer.classToClass(data, params); }) : classTransformer.classToClass(result, params);\n        };\n    };\n}\nexports.TransformClassToClass = TransformClassToClass;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../../src/decorators.ts"],"names":[],"mappings":"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","file":"decorators.js","sourcesContent":["import {ClassTransformer} from \"./ClassTransformer\";\nimport {defaultMetadataStorage} from \"./storage\";\nimport {TypeMetadata} from \"./metadata/TypeMetadata\";\nimport {ExposeMetadata} from \"./metadata/ExposeMetadata\";\nimport {ExposeOptions, ExcludeOptions, TypeOptions, TransformOptions} from \"./metadata/ExposeExcludeOptions\";\nimport {ExcludeMetadata} from \"./metadata/ExcludeMetadata\";\nimport {TransformMetadata} from \"./metadata/TransformMetadata\";\nimport {ClassTransformOptions} from \"./ClassTransformOptions\";\nimport {TransformationType} from \"./TransformOperationExecutor\";\n\n/**\n * Defines a custom logic for value transformation.\n */\nexport function Transform(transformFn: (value: any, obj: any, transformationType: TransformationType) => any, options?: TransformOptions) {\n    return function(target: any, key: string) {\n        const metadata = new TransformMetadata(target.constructor, key, transformFn, options);\n        defaultMetadataStorage.addTransformMetadata(metadata);\n    };\n}\n\n/**\n * Specifies a type of the property.\n */\nexport function Type(typeFunction?: (type?: TypeOptions) => Function) {\n    return function(target: any, key: string) {\n        const type = (Reflect as any).getMetadata(\"design:type\", target, key);\n        const metadata = new TypeMetadata(target.constructor, key, type, typeFunction);\n        defaultMetadataStorage.addTypeMetadata(metadata);\n    };\n}\n\n/**\n * Marks property as included in the process of transformation. By default it includes the property for both\n * constructorToPlain and plainToConstructor transformations, however you can specify on which of transformation types\n * you want to skip this property.\n */\nexport function Expose(options?: ExposeOptions) {\n    return function(object: Object|Function, propertyName?: string) {\n        const metadata = new ExposeMetadata(object instanceof Function ? object : object.constructor, propertyName, options || {});\n        defaultMetadataStorage.addExposeMetadata(metadata);\n    };\n}\n\n/**\n * Marks property as excluded from the process of transformation. By default it excludes the property for both\n * constructorToPlain and plainToConstructor transformations, however you can specify on which of transformation types\n * you want to skip this property.\n */\nexport function Exclude(options?: ExcludeOptions) {\n    return function(object: Object|Function, propertyName?: string) {\n        const metadata = new ExcludeMetadata(object instanceof Function ? object : object.constructor, propertyName, options || {});\n        defaultMetadataStorage.addExcludeMetadata(metadata);\n    };\n}\n\n/**\n * Transform the object from class to plain object and return only with the exposed properties.\n */\nexport function TransformClassToPlain(params?: ClassTransformOptions): Function {\n\n    return function (target: Function, propertyKey: string, descriptor: PropertyDescriptor) {\n        const classTransformer: ClassTransformer = new ClassTransformer();\n        const originalMethod = descriptor.value;\n\n        descriptor.value = function(...args: any[]) {\n            const result: any = originalMethod.apply(this, args);\n            const isPromise = !!result && (typeof result === \"object\" || typeof result === \"function\") && typeof result.then === \"function\";\n\n            return isPromise ? result.then((data: any) => classTransformer.classToPlain(data, params)) : classTransformer.classToPlain(result, params);\n        };\n    };\n}\n\n/**\n * Return the class instance only with the exposed properties.\n */\nexport function TransformClassToClass(params?: ClassTransformOptions): Function {\n\n    return function (target: Function, propertyKey: string, descriptor: PropertyDescriptor) {\n        const classTransformer: ClassTransformer = new ClassTransformer();\n        const originalMethod = descriptor.value;\n\n        descriptor.value = function(...args: any[]) {\n            const result: any = originalMethod.apply(this, args);\n            const isPromise = !!result && (typeof result === \"object\" || typeof result === \"function\") && typeof result.then === \"function\";\n\n            return isPromise ? result.then((data: any) => classTransformer.classToClass(data, params)) : classTransformer.classToClass(result, params);\n        };\n    };\n}\n"],"sourceRoot":"."}},"error":null,"hash":"7929f03112ec5ad814df8f2fb77c3b5d","cacheData":{"env":{}}}